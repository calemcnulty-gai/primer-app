This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-20T19:51:10.151Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        java/
          com/
            calemcnulty/
              primerapp/
                MainActivity.kt
                MainApplication.kt
        res/
          drawable/
            ic_launcher_background.xml
            rn_edit_text_material.xml
          mipmap-anydpi-v26/
            ic_launcher_round.xml
            ic_launcher.xml
          values/
            colors.xml
            strings.xml
            styles.xml
          values-night/
            colors.xml
        AndroidManifest.xml
    build.gradle
    proguard-rules.pro
  gradle/
    wrapper/
      gradle-wrapper.properties
  .gitignore
  build.gradle
  gradle.properties
  gradlew
  gradlew.bat
  settings.gradle
app/
  (tabs)/
    _layout.tsx
    explore.tsx
    index.tsx
  _layout.tsx
  +not-found.tsx
  index.tsx
components/
  __tests__/
    __snapshots__/
      ThemedText-test.tsx.snap
    ThemedText-test.tsx
  ui/
    IconSymbol.ios.tsx
    IconSymbol.tsx
    TabBarBackground.ios.tsx
    TabBarBackground.tsx
  Collapsible.tsx
  ErrorBoundary.tsx
  ExternalLink.tsx
  HapticTab.tsx
  HelloWave.tsx
  ParallaxScrollView.tsx
  PrimerContent.tsx
  SplashScreen.tsx
  StoryPage.tsx
  ThemedText.tsx
  ThemedView.tsx
  VoiceIndicator.tsx
constants/
  Colors.ts
context/
  VoiceContext.tsx
hooks/
  useRedux.ts
  useThemeColor.ts
ios/
  ThePrimer/
    Images.xcassets/
      AppIcon.appiconset/
        Contents.json
      SplashScreenBackground.colorset/
        Contents.json
      SplashScreenLogo.imageset/
        Contents.json
      Contents.json
    Supporting/
      Expo.plist
    AppDelegate.h
    AppDelegate.mm
    Info.plist
    main.m
    noop-file.swift
    PrivacyInfo.xcprivacy
    SplashScreen.storyboard
    ThePrimer-Bridging-Header.h
    ThePrimer.entitlements
  ThePrimer.xcodeproj/
    project.xcworkspace/
      xcshareddata/
        IDEWorkspaceChecks.plist
      contents.xcworkspacedata
    xcshareddata/
      xcschemes/
        ThePrimer.xcscheme
  ThePrimer.xcworkspace/
    contents.xcworkspacedata
  .gitignore
  Podfile
  Podfile.properties.json
scripts/
  clear-cache.js
  reset-project.js
services/
  api.ts
  voice.ts
store/
  slices/
    rtviSlice.ts
    storySlice.ts
    voiceSlice.ts
  index.ts
theme/
  index.ts
  ThemeProvider.tsx
.gitignore
api-guide.md
app.config.js
app.json.backup
CLAUDE.md
LOCALHOST_GUIDE.md
package.json
plan.md
README.md
tsconfig.json
voice-integration.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="android/app/src/debug/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
    <application android:usesCleartextTraffic="true" tools:targetApi="28" tools:ignore="GoogleAppIndexingWarning" tools:replace="android:usesCleartextTraffic" />
</manifest>
</file>

<file path="android/app/src/main/java/com/calemcnulty/primerapp/MainActivity.kt">
package com.calemcnulty.primerapp
import expo.modules.splashscreen.SplashScreenManager
import android.os.Build
import android.os.Bundle
import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled
import com.facebook.react.defaults.DefaultReactActivityDelegate
import expo.modules.ReactActivityDelegateWrapper
class MainActivity : ReactActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    // Set the theme to AppTheme BEFORE onCreate to support
    // coloring the background, status bar, and navigation bar.
    // This is required for expo-splash-screen.
    // setTheme(R.style.AppTheme);
    // @generated begin expo-splashscreen - expo prebuild (DO NOT MODIFY) sync-f3ff59a738c56c9a6119210cb55f0b613eb8b6af
    SplashScreenManager.registerOnActivity(this)
    // @generated end expo-splashscreen
    super.onCreate(null)
  }
  /**
   * Returns the name of the main component registered from JavaScript. This is used to schedule
   * rendering of the component.
   */
  override fun getMainComponentName(): String = "main"
  /**
   * Returns the instance of the [ReactActivityDelegate]. We use [DefaultReactActivityDelegate]
   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]
   */
  override fun createReactActivityDelegate(): ReactActivityDelegate {
    return ReactActivityDelegateWrapper(
          this,
          BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,
          object : DefaultReactActivityDelegate(
              this,
              mainComponentName,
              fabricEnabled
          ){})
  }
  /**
    * Align the back button behavior with Android S
    * where moving root activities to background instead of finishing activities.
    * @see <a href="https://developer.android.com/reference/android/app/Activity#onBackPressed()">onBackPressed</a>
    */
  override fun invokeDefaultOnBackPressed() {
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {
          if (!moveTaskToBack(false)) {
              // For non-root activities, use the default implementation to finish them.
              super.invokeDefaultOnBackPressed()
          }
          return
      }
      // Use the default back button implementation on Android S
      // because it's doing more than [Activity.moveTaskToBack] in fact.
      super.invokeDefaultOnBackPressed()
  }
}
</file>

<file path="android/app/src/main/java/com/calemcnulty/primerapp/MainApplication.kt">
package com.calemcnulty.primerapp
import android.app.Application
import android.content.res.Configuration
import android.media.AudioAttributes
import com.facebook.react.PackageList
import com.facebook.react.ReactApplication
import com.facebook.react.ReactNativeHost
import com.facebook.react.ReactPackage
import com.facebook.react.ReactHost
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load
import com.facebook.react.defaults.DefaultReactNativeHost
import com.facebook.react.soloader.OpenSourceMergedSoMapping
import com.facebook.soloader.SoLoader
import expo.modules.ApplicationLifecycleDispatcher
import expo.modules.ReactNativeHostWrapper
import com.oney.WebRTCModule.WebRTCModuleOptions
import org.webrtc.audio.JavaAudioDeviceModule
class MainApplication : Application(), ReactApplication {
  override val reactNativeHost: ReactNativeHost = ReactNativeHostWrapper(
        this,
        object : DefaultReactNativeHost(this) {
          override fun getPackages(): List<ReactPackage> {
            val packages = PackageList(this).packages
            // Packages that cannot be autolinked yet can be added manually here, for example:
            // packages.add(new MyReactNativePackage());
            return packages
          }
          override fun getJSMainModuleName(): String = ".expo/.virtual-metro-entry"
          override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG
          override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
          override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED
      }
  )
  override val reactHost: ReactHost
    get() = ReactNativeHostWrapper.createReactHost(applicationContext, reactNativeHost)
  override fun onCreate() {
    super.onCreate()
    // Configure WebRTC audio output to use media instead of call stream
    val options = WebRTCModuleOptions.getInstance()
    val audioAttributes = AudioAttributes.Builder()
      .setUsage(AudioAttributes.USAGE_MEDIA)
      .setContentType(AudioAttributes.CONTENT_TYPE_SPEECH)
      .build()
    options.audioDeviceModule = JavaAudioDeviceModule.builder(this)
      .setAudioAttributes(audioAttributes)
      .createAudioDeviceModule()
    // Enable screen sharing service
    options.enableMediaProjectionService = true
    SoLoader.init(this, OpenSourceMergedSoMapping)
    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
      // If you opted-in for the New Architecture, we load the native entry point for this app.
      load()
    }
    ApplicationLifecycleDispatcher.onApplicationCreate(this)
  }
  override fun onConfigurationChanged(newConfig: Configuration) {
    super.onConfigurationChanged(newConfig)
    ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)
  }
}
</file>

<file path="android/app/src/main/res/drawable/ic_launcher_background.xml">
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:drawable="@color/splashscreen_background"/>
  <item>
    <bitmap android:gravity="center" android:src="@drawable/splashscreen_logo"/>
  </item>
</layer-list>
</file>

<file path="android/app/src/main/res/drawable/rn_edit_text_material.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2014 The Android Open Source Project
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<inset xmlns:android="http://schemas.android.com/apk/res/android"
       android:insetLeft="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetRight="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetTop="@dimen/abc_edit_text_inset_top_material"
       android:insetBottom="@dimen/abc_edit_text_inset_bottom_material"
       >
    <selector>
        <!--
          This file is a copy of abc_edit_text_material (https://bit.ly/3k8fX7I).
          The item below with state_pressed="false" and state_focused="false" causes a NullPointerException.
          NullPointerException:tempt to invoke virtual method 'android.graphics.drawable.Drawable android.graphics.drawable.Drawable$ConstantState.newDrawable(android.content.res.Resources)'
          <item android:state_pressed="false" android:state_focused="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>
          For more info, see https://bit.ly/3CdLStv (react-native/pull/29452) and https://bit.ly/3nxOMoR.
        -->
        <item android:state_enabled="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>
        <item android:drawable="@drawable/abc_textfield_activated_mtrl_alpha"/>
    </selector>
</inset>
</file>

<file path="android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/iconBackground"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
</file>

<file path="android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/iconBackground"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
</file>

<file path="android/app/src/main/res/values/colors.xml">
<resources>
  <color name="splashscreen_background">#f8f3e8</color>
  <color name="iconBackground">#f8f3e8</color>
  <color name="colorPrimary">#023c69</color>
  <color name="colorPrimaryDark">#f8f3e8</color>
  <color name="activityBackground">#f8f3e8</color>
</resources>
</file>

<file path="android/app/src/main/res/values/strings.xml">
<resources>
  <string name="app_name">The Primer</string>
  <string name="expo_splash_screen_resize_mode" translatable="false">contain</string>
  <string name="expo_splash_screen_status_bar_translucent" translatable="false">false</string>
  <string name="expo_system_ui_user_interface_style" translatable="false">automatic</string>
</resources>
</file>

<file path="android/app/src/main/res/values/styles.xml">
<resources xmlns:tools="http://schemas.android.com/tools">
  <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
    <item name="android:textColor">@android:color/black</item>
    <item name="android:editTextStyle">@style/ResetEditText</item>
    <item name="android:editTextBackground">@drawable/rn_edit_text_material</item>
    <item name="colorPrimary">@color/colorPrimary</item>
    <item name="android:statusBarColor">#f8f3e8</item>
    <item name="android:windowBackground">@color/activityBackground</item>
  </style>
  <style name="ResetEditText" parent="@android:style/Widget.EditText">
    <item name="android:padding">0dp</item>
    <item name="android:textColorHint">#c8c8c8</item>
    <item name="android:textColor">@android:color/black</item>
  </style>
  <style name="Theme.App.SplashScreen" parent="Theme.SplashScreen">
    <item name="windowSplashScreenBackground">@color/splashscreen_background</item>
    <item name="windowSplashScreenAnimatedIcon">@drawable/splashscreen_logo</item>
    <item name="postSplashScreenTheme">@style/AppTheme</item>
  </style>
</resources>
</file>

<file path="android/app/src/main/res/values-night/colors.xml">
<resources/>
</file>

<file path="android/app/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
  <uses-permission android:name="android.permission.BLUETOOTH"/>
  <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" android:minSdkVersion="31"/>
  <uses-permission android:name="android.permission.CAMERA"/>
  <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE"/>
  <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
  <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PROJECTION" />
  <uses-permission android:name="android.permission.INTERNET"/>
  <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>
  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
  <uses-permission android:name="android.permission.RECORD_AUDIO"/>
  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
  <uses-permission android:name="android.permission.VIBRATE"/>
  <uses-permission android:name="android.permission.WAKE_LOCK"/>
  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
  <uses-feature android:name="android.hardware.camera" />
  <uses-feature android:name="android.hardware.camera.autofocus" />
  <uses-feature android:name="android.hardware.audio.output" />
  <uses-feature android:name="android.hardware.microphone" />
  <queries>
    <intent>
      <action android:name="android.intent.action.VIEW"/>
      <category android:name="android.intent.category.BROWSABLE"/>
      <data android:scheme="https"/>
    </intent>
  </queries>
  <application android:name=".MainApplication" android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round" android:allowBackup="true" android:theme="@style/AppTheme" android:supportsRtl="true">
    <meta-data android:name="expo.modules.updates.ENABLED" android:value="false"/>
    <meta-data android:name="expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH" android:value="NEVER"/>
    <meta-data android:name="expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS" android:value="0"/>
    <activity android:name=".MainActivity" android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|uiMode" android:launchMode="singleTask" android:windowSoftInputMode="adjustResize" android:theme="@style/Theme.App.SplashScreen" android:exported="true" android:screenOrientation="portrait">
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
      <intent-filter>
        <action android:name="android.intent.action.VIEW"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <category android:name="android.intent.category.BROWSABLE"/>
        <data android:scheme="myapp"/>
        <data android:scheme="com.calemcnulty.primerapp"/>
      </intent-filter>
    </activity>
  </application>
</manifest>
</file>

<file path="android/app/build.gradle">
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.calemcnulty.primerapp'
    defaultConfig {
        applicationId 'com.calemcnulty.primerapp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
</file>

<file path="android/app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# react-native-reanimated
-keep class com.swmansion.reanimated.** { *; }
-keep class com.facebook.react.turbomodule.** { *; }

# WebRTC
-keep class org.webrtc.** { *; }

# Add any project specific keep options here:
</file>

<file path="android/gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-all.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="android/.gitignore">
# OSX
#
.DS_Store

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx/

# Bundle artifacts
*.jsbundle
</file>

<file path="android/build.gradle">
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '35.0.0'
        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '24')
        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '35')
        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '34')
        kotlinVersion = findProperty('android.kotlinVersion') ?: '1.9.25'

        ndkVersion = "26.1.10909125"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath('com.android.tools.build:gradle')
        classpath('com.facebook.react:react-native-gradle-plugin')
        classpath('org.jetbrains.kotlin:kotlin-gradle-plugin')
    }
}

apply plugin: "com.facebook.react.rootproject"

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
        }
        maven {
            // Android JSC is installed from npm
            url(new File(['node', '--print', "require.resolve('jsc-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), '../dist'))
        }

        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }
}
</file>

<file path="android/gradle.properties">
# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx512m -XX:MaxMetaspaceSize=256m
org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true

# Enable AAPT2 PNG crunching
android.enablePngCrunchInReleaseBuilds=true

# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64

# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric render in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
newArchEnabled=true

# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
hermesEnabled=true

# Enable GIF support in React Native images (~200 B increase)
expo.gif.enabled=true
# Enable webp support in React Native images (~85 KB increase)
expo.webp.enabled=true
# Enable animated webp support (~3.4 MB increase)
# Disabled by default because iOS doesn't support animated webp
expo.webp.animated=false

# Enable network inspector
EX_DEV_CLIENT_NETWORK_INSPECTOR=true

# Use legacy packaging to compress native libraries in the resulting APK.
expo.useLegacyPackaging=false

# This fixes a weird WebRTC runtime problem on some devices
# https://github.com/jitsi/jitsi-meet/issues/7911#issuecomment-714323255
android.enableDexingArtifactTransform.desugaring=false
</file>

<file path="android/gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="android/gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="android/settings.gradle">
pluginManagement {
    includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().toString())
}
plugins { id("com.facebook.react.settings") }

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    def command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'android'
    ].toList()
    ex.autolinkLibrariesFromCommand(command)
  }
}

rootProject.name = 'The Primer'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())
</file>

<file path="app/(tabs)/_layout.tsx">
import { Tabs } from 'expo-router';
import React from 'react';
import { Platform } from 'react-native';
import { HapticTab } from '@/components/HapticTab';
import { IconSymbol } from '@/components/ui/IconSymbol';
import TabBarBackground from '@/components/ui/TabBarBackground';
import { useTheme } from '@/theme/ThemeProvider';
import ErrorBoundary from '@/components/ErrorBoundary';
export default function TabLayout() {
  const { colors } = useTheme();
  return (
    <ErrorBoundary>
      <Tabs
        screenOptions={{
          tabBarActiveTintColor: colors.tint,
          headerShown: false,
          tabBarButton: HapticTab,
          tabBarBackground: TabBarBackground,
          tabBarStyle: Platform.select({
            ios: {
              // Use a transparent background on iOS to show the blur effect
              position: 'absolute',
            },
            default: {},
          }),
        }}>
        <Tabs.Screen
          name="index"
          options={{
            title: 'Story',
            tabBarIcon: ({ color }) => <IconSymbol size={28} name="book.fill" color={color} />,
          }}
        />
        <Tabs.Screen
          name="rtvi"
          options={{
            title: 'RTVI',
            tabBarIcon: ({ color }) => <IconSymbol size={28} name="waveform.circle.fill" color={color} />,
          }}
        />
        <Tabs.Screen
          name="explore"
          options={{
            title: 'About',
            tabBarIcon: ({ color }) => <IconSymbol size={28} name="info.circle.fill" color={color} />,
          }}
        />
      </Tabs>
    </ErrorBoundary>
  );
}
</file>

<file path="app/(tabs)/explore.tsx">
import { StyleSheet, Image, Platform } from 'react-native';
import { Collapsible } from '@/components/Collapsible';
import { ExternalLink } from '@/components/ExternalLink';
import ParallaxScrollView from '@/components/ParallaxScrollView';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
export default function TabTwoScreen() {
  return (
    <ParallaxScrollView
      headerBackgroundColor={{ light: '#D0D0D0', dark: '#353636' }}
      headerImage={
        <IconSymbol
          size={310}
          color="#808080"
          name="chevron.left.forwardslash.chevron.right"
          style={styles.headerImage}
        />
      }>
      <ThemedView style={styles.titleContainer}>
        <ThemedText type="title">Explore</ThemedText>
      </ThemedView>
      <ThemedText>This app includes example code to help you get started.</ThemedText>
      <Collapsible title="File-based routing">
        <ThemedText>
          This app has two screens:{' '}
          <ThemedText type="defaultSemiBold">app/(tabs)/index.tsx</ThemedText> and{' '}
          <ThemedText type="defaultSemiBold">app/(tabs)/explore.tsx</ThemedText>
        </ThemedText>
        <ThemedText>
          The layout file in <ThemedText type="defaultSemiBold">app/(tabs)/_layout.tsx</ThemedText>{' '}
          sets up the tab navigator.
        </ThemedText>
        <ExternalLink href="https://docs.expo.dev/router/introduction">
          <ThemedText type="link">Learn more</ThemedText>
        </ExternalLink>
      </Collapsible>
      <Collapsible title="Android, iOS, and web support">
        <ThemedText>
          You can open this project on Android, iOS, and the web. To open the web version, press{' '}
          <ThemedText type="defaultSemiBold">w</ThemedText> in the terminal running this project.
        </ThemedText>
      </Collapsible>
      <Collapsible title="Images">
        <ThemedText>
          For static images, you can use the <ThemedText type="defaultSemiBold">@2x</ThemedText> and{' '}
          <ThemedText type="defaultSemiBold">@3x</ThemedText> suffixes to provide files for
          different screen densities
        </ThemedText>
        <Image source={require('@/assets/images/react-logo.png')} style={{ alignSelf: 'center' }} />
        <ExternalLink href="https://reactnative.dev/docs/images">
          <ThemedText type="link">Learn more</ThemedText>
        </ExternalLink>
      </Collapsible>
      <Collapsible title="Custom fonts">
        <ThemedText>
          Open <ThemedText type="defaultSemiBold">app/_layout.tsx</ThemedText> to see how to load{' '}
          <ThemedText style={{ fontFamily: 'SpaceMono' }}>
            custom fonts such as this one.
          </ThemedText>
        </ThemedText>
        <ExternalLink href="https://docs.expo.dev/versions/latest/sdk/font">
          <ThemedText type="link">Learn more</ThemedText>
        </ExternalLink>
      </Collapsible>
      <Collapsible title="Light and dark mode components">
        <ThemedText>
          This template has light and dark mode support. The{' '}
          <ThemedText type="defaultSemiBold">useColorScheme()</ThemedText> hook lets you inspect
          what the user's current color scheme is, and so you can adjust UI colors accordingly.
        </ThemedText>
        <ExternalLink href="https://docs.expo.dev/develop/user-interface/color-themes/">
          <ThemedText type="link">Learn more</ThemedText>
        </ExternalLink>
      </Collapsible>
      <Collapsible title="Animations">
        <ThemedText>
          This template includes an example of an animated component. The{' '}
          <ThemedText type="defaultSemiBold">components/HelloWave.tsx</ThemedText> component uses
          the powerful <ThemedText type="defaultSemiBold">react-native-reanimated</ThemedText>{' '}
          library to create a waving hand animation.
        </ThemedText>
        {Platform.select({
          ios: (
            <ThemedText>
              The <ThemedText type="defaultSemiBold">components/ParallaxScrollView.tsx</ThemedText>{' '}
              component provides a parallax effect for the header image.
            </ThemedText>
          ),
        })}
      </Collapsible>
    </ParallaxScrollView>
  );
}
const styles = StyleSheet.create({
  headerImage: {
    color: '#808080',
    bottom: -90,
    left: -35,
    position: 'absolute',
  },
  titleContainer: {
    flexDirection: 'row',
    gap: 8,
  },
});
</file>

<file path="app/(tabs)/index.tsx">
import { StyleSheet } from 'react-native';
import { StoryPage } from '@/components/StoryPage';
import { ThemedView } from '@/components/ThemedView';
import ErrorBoundary from '@/components/ErrorBoundary';
export default function HomeScreen() {
  return (
    <ErrorBoundary>
      <ThemedView style={styles.container}>
        <StoryPage />
      </ThemedView>
    </ErrorBoundary>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
</file>

<file path="app/_layout.tsx">
import { DefaultTheme, ThemeProvider as NavigationThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import { StatusBar } from 'expo-status-bar';
import { useEffect } from 'react';
import 'react-native-reanimated';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { ThemeProvider, useTheme } from '@/theme/ThemeProvider';
import { VoiceProvider } from '@/context/VoiceContext';
import VoiceIndicator from '@/components/VoiceIndicator';
import { store, persistor } from '../store';
import { Colors } from '@/constants/Colors';
// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();
// Component to handle navigation theme
function NavigationTheme({ children }: { children: React.ReactNode }) {
  const { colors } = useTheme();
  // Customize navigation theme to match our e-ink theme
  const customNavigationTheme = {
    ...DefaultTheme,
    colors: {
      ...DefaultTheme.colors,
      background: colors.background,
      card: colors.background,
      text: colors.text,
      border: colors.separator,
      primary: colors.tint,
    },
  };
  return (
    <NavigationThemeProvider value={customNavigationTheme}>
      {children}
    </NavigationThemeProvider>
  );
}
export default function RootLayout() {
  const [loaded] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
  });
  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);
  if (!loaded) {
    return null;
  }
  return (
    <Provider store={store}>
      <PersistGate loading={null} persistor={persistor}>
        <ThemeProvider>
          <VoiceProvider>
            <NavigationTheme>
              <Stack screenOptions={{ headerShown: false, animation: 'fade' }}>
                <Stack.Screen name="index" />
              </Stack>
              <StatusBar style="dark" />
              <VoiceIndicator />
            </NavigationTheme>
          </VoiceProvider>
        </ThemeProvider>
      </PersistGate>
    </Provider>
  );
}
</file>

<file path="app/+not-found.tsx">
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});
</file>

<file path="app/index.tsx">
import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Platform } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SplashScreen } from '@/components/SplashScreen';
import { ThemeProvider, useTheme } from '@/theme/ThemeProvider';
import { Redirect } from 'expo-router';
import ErrorBoundary from '@/components/ErrorBoundary';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from '../store';
// import { RNDailyTransport } from '@pipecat-ai/react-native-daily-transport';
// import { RTVIClient } from '@pipecat-ai/client-js';
// import { RTVIClientAudio } from '@pipecat-ai/react-native-daily-transport';
// // Create and configure the client
// let voiceClient = new RTVIClient({
//   // @ts-ignore
//   transport: new RNDailyTransport(),
//   params: {
//     baseUrl: 'http://18.117.223.199:8000',
//     requestData: {
//       apiKey: 'OER0he3w4SKAH12dL7ZVYlSphxeVjfk9',
//       voice: '',
//       //messages: [],
//       //tools: [],
//     },
//   },
// });
// voiceClient.connect();
// Actual app content inside ThemeProvider
function AppContent() {
  const { colors } = useTheme();
  const [showSplash, setShowSplash] = useState(true);
  const [readyToRedirect, setReadyToRedirect] = useState(false);
  const handleSplashFinish = () => {
    setShowSplash(false);
    // On Android, add a small delay before redirecting to give the app time to fully initialize
    if (Platform.OS === 'android') {
      setTimeout(() => {
        setReadyToRedirect(true);
      }, 1000);
    } else {
      setReadyToRedirect(true);
    }
  };
  // After splash screen, redirect to the tabbed interface with Story mode
  if (!showSplash && readyToRedirect) {
    return <Redirect href="/(tabs)" />;
  }
  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <StatusBar style="dark" />
      <SplashScreen onFinish={handleSplashFinish} />
    </View>
  );
}
// Main app component with proper providers
export default function PrimerApp() {
  return (
    <ErrorBoundary>
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <ThemeProvider>
            <AppContent />
          </ThemeProvider>
        </PersistGate>
      </Provider>
    </ErrorBoundary>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
</file>

<file path="components/__tests__/__snapshots__/ThemedText-test.tsx.snap">
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<Text
  style={
    [
      {
        "color": "#5b4636",
      },
      {
        "fontFamily": "SpaceMono",
        "fontSize": 16,
        "lineHeight": 24,
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ]
  }
>
  Snapshot test!
</Text>
`;
</file>

<file path="components/__tests__/ThemedText-test.tsx">
import * as React from 'react';
import renderer from 'react-test-renderer';
import { ThemedText } from '../ThemedText';
import { ThemeProvider } from '@/theme/ThemeProvider';
it(`renders correctly`, () => {
  const tree = renderer.create(
    <ThemeProvider>
      <ThemedText>Snapshot test!</ThemedText>
    </ThemeProvider>
  ).toJSON();
  expect(tree).toMatchSnapshot();
});
</file>

<file path="components/ui/IconSymbol.ios.tsx">
import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';
import { StyleProp, ViewStyle } from 'react-native';
export function IconSymbol({
  name,
  size = 24,
  color,
  style,
  weight = 'regular',
}: {
  name: SymbolViewProps['name'];
  size?: number;
  color: string;
  style?: StyleProp<ViewStyle>;
  weight?: SymbolWeight;
}) {
  return (
    <SymbolView
      weight={weight}
      tintColor={color}
      resizeMode="scaleAspectFit"
      name={name}
      style={[
        {
          width: size,
          height: size,
        },
        style,
      ]}
    />
  );
}
</file>

<file path="components/ui/IconSymbol.tsx">
// This file is a fallback for using MaterialIcons on Android and web.
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { SymbolWeight } from 'expo-symbols';
import React from 'react';
import { OpaqueColorValue, StyleProp, ViewStyle, TextStyle } from 'react-native';
// Add your SFSymbol to MaterialIcons mappings here.
const MAPPING = {
  // See MaterialIcons here: https://icons.expo.fyi
  // See SF Symbols in the SF Symbols app on Mac.
  'house.fill': 'home',
  'paperplane.fill': 'send',
  'chevron.left.forwardslash.chevron.right': 'code',
  'chevron.right': 'chevron-right',
} as Partial<
  Record<
    import('expo-symbols').SymbolViewProps['name'],
    React.ComponentProps<typeof MaterialIcons>['name']
  >
>;
export type IconSymbolName = keyof typeof MAPPING;
/**
 * An icon component that uses native SFSymbols on iOS, and MaterialIcons on Android and web. This ensures a consistent look across platforms, and optimal resource usage.
 *
 * Icon `name`s are based on SFSymbols and require manual mapping to MaterialIcons.
 */
export function IconSymbol({
  name,
  size = 24,
  color,
  style,
}: {
  name: IconSymbolName;
  size?: number;
  color: string | OpaqueColorValue;
  style?: StyleProp<TextStyle>;
  weight?: SymbolWeight;
}) {
  return <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;
}
</file>

<file path="components/ui/TabBarBackground.ios.tsx">
import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';
import { BlurView } from 'expo-blur';
import { StyleSheet } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
export default function BlurTabBarBackground() {
  return (
    <BlurView
      // System chrome material automatically adapts to the system's theme
      // and matches the native tab bar appearance on iOS.
      tint="systemChromeMaterial"
      intensity={100}
      style={StyleSheet.absoluteFill}
    />
  );
}
export function useBottomTabOverflow() {
  const tabHeight = useBottomTabBarHeight();
  const { bottom } = useSafeAreaInsets();
  return tabHeight - bottom;
}
</file>

<file path="components/ui/TabBarBackground.tsx">
// This is a shim for web and Android where the tab bar is generally opaque.
export default undefined;
export function useBottomTabOverflow() {
  return 0;
}
</file>

<file path="components/Collapsible.tsx">
import { PropsWithChildren, useState } from 'react';
import { StyleSheet, TouchableOpacity } from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
export function Collapsible({ children, title }: PropsWithChildren & { title: string }) {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <ThemedView>
      <TouchableOpacity
        style={styles.heading}
        onPress={() => setIsOpen((value) => !value)}
        activeOpacity={0.8}>
        <IconSymbol
          name="chevron.right"
          size={18}
          weight="medium"
          color={Colors.icon}
          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}
        />
        <ThemedText type="defaultSemiBold">{title}</ThemedText>
      </TouchableOpacity>
      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}
    </ThemedView>
  );
}
const styles = StyleSheet.create({
  heading: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  content: {
    marginTop: 6,
    marginLeft: 24,
  },
});
</file>

<file path="components/ErrorBoundary.tsx">
import React, { Component, ErrorInfo, ReactNode } from 'react';
import { View, StyleSheet, TouchableOpacity, Platform } from 'react-native';
import { ThemedText } from './ThemedText';
import { ThemedView } from './ThemedView';
interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}
interface State {
  hasError: boolean;
  error: Error | null;
}
class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null
    };
  }
  static getDerivedStateFromError(error: Error): State {
    // Update state so the next render will show the fallback UI
    return { hasError: true, error };
  }
  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    // You can log the error to an error reporting service
    console.error("ErrorBoundary caught an error:", error, errorInfo);
  }
  resetError = (): void => {
    this.setState({ hasError: false, error: null });
  };
  render(): ReactNode {
    if (this.state.hasError) {
      // Custom fallback UI
      return this.props.fallback || (
        <ThemedView style={styles.container}>
          <ThemedText style={styles.title}>Something went wrong</ThemedText>
          <ThemedText style={styles.message}>
            {this.state.error?.toString() || "An unexpected error occurred"}
          </ThemedText>
          {Platform.OS === 'android' && (
            <ThemedText style={styles.androidNote}>
              This may be due to a network connectivity issue on Android.
            </ThemedText>
          )}
          <TouchableOpacity style={styles.button} onPress={this.resetError}>
            <ThemedText style={styles.buttonText}>Try Again</ThemedText>
          </TouchableOpacity>
        </ThemedView>
      );
    }
    return this.props.children;
  }
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  message: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 20,
  },
  androidNote: {
    fontSize: 14,
    fontStyle: 'italic',
    textAlign: 'center',
    marginBottom: 20,
    opacity: 0.7,
  },
  button: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});
export default ErrorBoundary;
</file>

<file path="components/ExternalLink.tsx">
import { Link } from 'expo-router';
import { openBrowserAsync } from 'expo-web-browser';
import { type ComponentProps } from 'react';
import { Platform } from 'react-native';
type Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: string };
export function ExternalLink({ href, ...rest }: Props) {
  return (
    <Link
      target="_blank"
      {...rest}
      href={href as any}
      onPress={async (event) => {
        if (Platform.OS !== 'web') {
          // Prevent the default behavior of linking to the default browser on native.
          event.preventDefault();
          // Open the link in an in-app browser.
          await openBrowserAsync(href);
        }
      }}
    />
  );
}
</file>

<file path="components/HapticTab.tsx">
import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';
import { PlatformPressable } from '@react-navigation/elements';
import * as Haptics from 'expo-haptics';
export function HapticTab(props: BottomTabBarButtonProps) {
  return (
    <PlatformPressable
      {...props}
      onPressIn={(ev) => {
        if (process.env.EXPO_OS === 'ios') {
          // Add a soft haptic feedback when pressing down on the tabs.
          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        }
        props.onPressIn?.(ev);
      }}
    />
  );
}
</file>

<file path="components/HelloWave.tsx">
import { useEffect } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
  withRepeat,
  withSequence,
} from 'react-native-reanimated';
import { ThemedText } from '@/components/ThemedText';
export function HelloWave() {
  const rotationAnimation = useSharedValue(0);
  useEffect(() => {
    rotationAnimation.value = withRepeat(
      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),
      4 // Run the animation 4 times
    );
  }, []);
  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotationAnimation.value}deg` }],
  }));
  return (
    <Animated.View style={animatedStyle}>
      <ThemedText style={styles.text}>👋</ThemedText>
    </Animated.View>
  );
}
const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    lineHeight: 32,
    marginTop: -6,
  },
});
</file>

<file path="components/ParallaxScrollView.tsx">
import type { PropsWithChildren, ReactElement } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  interpolate,
  useAnimatedRef,
  useAnimatedStyle,
  useScrollViewOffset,
} from 'react-native-reanimated';
import { ThemedView } from '@/components/ThemedView';
import { useBottomTabOverflow } from '@/components/ui/TabBarBackground';
import { useTheme } from '@/theme/ThemeProvider';
const HEADER_HEIGHT = 250;
type Props = PropsWithChildren<{
  headerImage: ReactElement;
  headerBackgroundColor?: string;
}>;
export default function ParallaxScrollView({
  children,
  headerImage,
  headerBackgroundColor,
}: Props) {
  const { colors } = useTheme();
  const scrollRef = useAnimatedRef<Animated.ScrollView>();
  const scrollOffset = useScrollViewOffset(scrollRef);
  const bottom = useBottomTabOverflow();
  // Default e-ink theme header color if none provided
  const headerColor = headerBackgroundColor || colors.paperTexture;
  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: interpolate(
            scrollOffset.value,
            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],
            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]
          ),
        },
        {
          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),
        },
      ],
    };
  });
  return (
    <ThemedView style={styles.container}>
      <Animated.ScrollView
        ref={scrollRef}
        scrollEventThrottle={16}
        scrollIndicatorInsets={{ bottom }}
        contentContainerStyle={{ paddingBottom: bottom }}>
        <Animated.View
          style={[
            styles.header,
            { backgroundColor: headerColor },
            headerAnimatedStyle,
          ]}>
          {headerImage}
        </Animated.View>
        <ThemedView style={styles.content}>{children}</ThemedView>
      </Animated.ScrollView>
    </ThemedView>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    height: HEADER_HEIGHT,
    overflow: 'hidden',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  content: {
    flex: 1,
    padding: 24,
    gap: 16,
    overflow: 'hidden',
  },
});
</file>

<file path="components/PrimerContent.tsx">
import React, { useEffect, useState } from 'react';
import { View, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useTheme } from '@/theme/ThemeProvider';
import { ThemedText } from '@/components/ThemedText';
import api from '@/services/api';
export function PrimerContent() {
  const { colors } = useTheme();
  const [content, setContent] = useState<{ title: string; content: string } | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  useEffect(() => {
    const loadContent = async () => {
      try {
        setLoading(true);
        const data = await api.content.getContent();
        setContent(data);
        setError(null);
      } catch (err) {
        console.error('Error loading content:', err);
        setError('Failed to load your story. Please try again.');
        // Fallback content in case API fails
        setContent({
          title: "Chapter One",
          content: "Once upon a time, in a land both distant and near, a young girl discovered a most unusual book. The book was not like any other she had encountered before—its pages seemed to know her thoughts before she thought them, and it told stories that unfolded precisely as she needed them to.\n\nThe book was bound in leather that felt warm to the touch, embossed with intricate patterns that seemed to shift when viewed from different angles. Its pages were neither paper nor parchment, but something finer, like silk spun from knowledge itself.\n\n\"Welcome,\" the book seemed to whisper, though no sound emerged from its pages. \"I have been waiting for you.\""
        });
      } finally {
        setLoading(false);
      }
    };
    loadContent();
  }, []);
  if (loading) {
    return (
      <View style={[styles.container, styles.loadingContainer, { backgroundColor: colors.background }]}>
        <ActivityIndicator size="large" color={colors.tint} />
        <ThemedText style={styles.loadingText}>Opening your primer...</ThemedText>
      </View>
    );
  }
  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {error && (
          <View style={styles.errorContainer}>
            <ThemedText style={styles.errorText}>{error}</ThemedText>
          </View>
        )}
        <View style={styles.pageContainer}>
          <View style={[styles.pageContent, { backgroundColor: colors.paperTexture }]}>
            {content && (
              <>
                <ThemedText style={styles.title}>{content.title}</ThemedText>
                <View style={styles.decorativeDivider} />
                <ThemedText style={styles.bodyText}>{content.content}</ThemedText>
              </>
            )}
          </View>
        </View>
      </ScrollView>
    </View>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
  },
  errorContainer: {
    padding: 16,
    marginBottom: 16,
    backgroundColor: '#f8d7da',
    borderWidth: 1,
    borderColor: '#f5c6cb',
    borderRadius: 4,
  },
  errorText: {
    color: '#721c24',
    textAlign: 'center',
  },
  scrollContent: {
    flexGrow: 1,
    padding: 20,
  },
  pageContainer: {
    borderWidth: 1,
    borderColor: '#8a7b6b',
    backgroundColor: '#f8f3e8',
    borderRadius: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    overflow: 'hidden',
  },
  pageContent: {
    padding: 24,
    minHeight: 500,
  },
  title: {
    fontSize: 24,
    textAlign: 'center',
    fontFamily: 'SpaceMono',
    marginBottom: 16,
  },
  decorativeDivider: {
    height: 1,
    backgroundColor: '#8a7b6b',
    marginVertical: 16,
    width: '100%',
  },
  bodyText: {
    fontSize: 16,
    lineHeight: 24,
    textAlign: 'justify',
    fontFamily: 'SpaceMono',
  },
});
</file>

<file path="components/SplashScreen.tsx">
import React, { useEffect } from 'react';
import { View, StyleSheet, Image, Animated } from 'react-native';
import { useTheme } from '@/theme/ThemeProvider';
import { ThemedText } from '@/components/ThemedText';
type SplashScreenProps = {
  onFinish: () => void;
};
export function SplashScreen({ onFinish }: SplashScreenProps) {
  const { colors } = useTheme();
  const fadeAnim = React.useRef(new Animated.Value(0)).current;
  const scaleAnim = React.useRef(new Animated.Value(0.9)).current;
  useEffect(() => {
    // Animation sequence
    Animated.sequence([
      // Fade in and scale up
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 1500,
          useNativeDriver: true,
        }),
        Animated.timing(scaleAnim, {
          toValue: 1,
          duration: 1500,
          useNativeDriver: true,
        }),
      ]),
      // Hold for a moment
      Animated.delay(1000),
      // Fade out
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start(() => {
      // Call the onFinish callback when animations complete
      onFinish();
    });
  }, [fadeAnim, scaleAnim, onFinish]);
  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <Animated.View
        style={[
          styles.content,
          {
            opacity: fadeAnim,
            transform: [{ scale: scaleAnim }],
          },
        ]}>
        <View style={styles.bookFrame}>
          <View style={[styles.bookCover, { backgroundColor: colors.paperTexture }]}>
            <ThemedText style={styles.title}>The Young Lady's</ThemedText>
            <ThemedText style={styles.subtitle}>Illustrated Primer</ThemedText>
            <View style={styles.decorativeLine} />
            <ThemedText style={styles.edition}>A Digital Edition</ThemedText>
          </View>
        </View>
      </Animated.View>
    </View>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  bookFrame: {
    width: 280,
    height: 400,
    borderWidth: 2,
    borderColor: '#5b4636',
    padding: 15,
    backgroundColor: '#f8f3e8',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
    elevation: 8,
  },
  bookCover: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#8a7b6b',
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 28,
    textAlign: 'center',
    fontFamily: 'SpaceMono',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 24,
    textAlign: 'center',
    fontFamily: 'SpaceMono',
    marginBottom: 30,
  },
  decorativeLine: {
    width: 150,
    height: 2,
    backgroundColor: '#8a7b6b',
    marginBottom: 30,
  },
  edition: {
    fontSize: 14,
    fontFamily: 'SpaceMono',
    fontStyle: 'italic',
  },
});
</file>

<file path="components/StoryPage.tsx">
import React, { useEffect } from 'react';
import { View, StyleSheet, ScrollView, ActivityIndicator, TouchableOpacity, Animated, SafeAreaView } from 'react-native';
import { useTheme } from '@/theme/ThemeProvider';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useAppDispatch, useAppSelector } from '@/hooks/useRedux';
import { fetchCurrentSegment, makeChoice, setTransitioning } from '@/store/slices/storySlice';
export function StoryPage() {
  const { colors } = useTheme();
  const dispatch = useAppDispatch();
  const { currentSegment, isLoading, error, isTransitioning } = useAppSelector((state) => state.story);
  const spinValue = React.useRef(new Animated.Value(0)).current;
  // Start the page turn animation
  const startPageTurnAnimation = () => {
    Animated.loop(
      Animated.timing(spinValue, {
        toValue: 1,
        duration: 1500,
        useNativeDriver: true,
      })
    ).start();
  };
  // Stop the page turn animation
  const stopPageTurnAnimation = () => {
    spinValue.stopAnimation();
    spinValue.setValue(0);
  };
  // Generate the page turn rotation
  const pageTurn = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'],
  });
  // Load initial story segment
  useEffect(() => {
    dispatch(fetchCurrentSegment());
  }, [dispatch]);
  // Handle animation for loading states
  useEffect(() => {
    if (isLoading || isTransitioning) {
      startPageTurnAnimation();
    } else {
      stopPageTurnAnimation();
    }
  }, [isLoading, isTransitioning]);
  // Handle making a choice
  const handleChoiceSelect = (choiceId: string) => {
    dispatch(setTransitioning(true));
    dispatch(makeChoice(choiceId));
  };
  // Show loading indicator when transitioning between pages
  if (isLoading && !currentSegment) {
    return (
      <SafeAreaView style={[styles.container, styles.loadingContainer, { backgroundColor: colors.background }]}>
        <Animated.View style={{ transform: [{ rotate: pageTurn }] }}>
          <ThemedView style={styles.loadingIcon} variant="card" />
        </Animated.View>
        <ThemedText style={styles.loadingText}>Loading story from API...</ThemedText>
      </SafeAreaView>
    );
  }
  // If there's an error, display it prominently
  if (error) {
    return (
      <SafeAreaView style={[styles.container, styles.errorContainer, { backgroundColor: colors.background }]}>
        <ThemedText style={styles.errorTitle}>API Error</ThemedText>
        <ThemedText style={styles.errorText}>{error}</ThemedText>
        <TouchableOpacity 
          style={styles.retryButton}
          onPress={() => dispatch(fetchCurrentSegment())}
        >
          <ThemedText style={styles.retryButtonText}>Retry</ThemedText>
        </TouchableOpacity>
      </SafeAreaView>
    );
  }
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={[styles.pageContent, { backgroundColor: colors.paperTexture }]}>
          {isTransitioning ? (
            <View style={styles.transitionContainer}>
              <Animated.View style={{ transform: [{ rotate: pageTurn }] }}>
                <ThemedView style={styles.loadingIcon} variant="card" />
              </Animated.View>
              <ThemedText style={styles.loadingText}>Turning page...</ThemedText>
            </View>
          ) : currentSegment ? (
            <>
              <ThemedText style={styles.title}>{currentSegment.title}</ThemedText>
              <View style={styles.decorativeDivider} />
              <ThemedText style={styles.bodyText}>{currentSegment.content}</ThemedText>
              {currentSegment.choices && currentSegment.choices.length > 0 && (
                <View style={styles.choicesContainer}>
                  <ThemedText style={styles.choiceHeader}>What will you do?</ThemedText>
                  {currentSegment.choices.map((choice) => (
                    <TouchableOpacity
                      key={choice.choiceId}
                      style={styles.choiceButton}
                      onPress={() => handleChoiceSelect(choice.choiceId)}
                    >
                      <ThemedText style={styles.choiceText}>{choice.text}</ThemedText>
                    </TouchableOpacity>
                  ))}
                </View>
              )}
            </>
          ) : null}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
  },
  loadingIcon: {
    width: 60,
    height: 80,
    borderRadius: 4,
  },
  transitionContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: 300,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  errorTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    color: '#721c24',
    textAlign: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#721c24',
    textAlign: 'center',
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#343a40',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
    marginTop: 16,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  scrollContent: {
    flexGrow: 1,
  },
  pageContent: {
    flex: 1,
    padding: 24,
    minHeight: '100%',
  },
  title: {
    fontSize: 24,
    textAlign: 'center',
    fontFamily: 'SpaceMono',
    marginBottom: 16,
  },
  decorativeDivider: {
    height: 1,
    backgroundColor: '#8a7b6b',
    marginVertical: 16,
    width: '100%',
  },
  bodyText: {
    fontSize: 16,
    lineHeight: 24,
    textAlign: 'justify',
    fontFamily: 'SpaceMono',
  },
  choicesContainer: {
    marginTop: 32,
    gap: 12,
  },
  choiceHeader: {
    fontSize: 18,
    textAlign: 'center',
    fontFamily: 'SpaceMono',
    marginBottom: 8,
  },
  choiceButton: {
    backgroundColor: '#f0e6d2',
    borderWidth: 1,
    borderColor: '#8a7b6b',
    borderRadius: 4,
    padding: 12,
  },
  choiceText: {
    fontSize: 16,
    textAlign: 'center',
    fontFamily: 'SpaceMono',
  },
});
</file>

<file path="components/ThemedText.tsx">
import { Text, type TextProps, StyleSheet } from 'react-native';
import { useTheme } from '@/theme/ThemeProvider';
export type ThemedTextProps = TextProps & {
  customColor?: string;
  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';
};
export function ThemedText({
  style,
  customColor,
  type = 'default',
  ...rest
}: ThemedTextProps) {
  const { colors } = useTheme();
  // Use provided color, otherwise use theme color
  const textColor = customColor || colors.text;
  return (
    <Text
      style={[
        { color: textColor },
        type === 'default' ? styles.default : undefined,
        type === 'title' ? styles.title : undefined,
        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,
        type === 'subtitle' ? styles.subtitle : undefined,
        type === 'link' ? [styles.link, { color: colors.tint }] : undefined,
        style,
      ]}
      {...rest}
    />
  );
}
// Fonts styled to look good with the e-ink, paper-like theme
const styles = StyleSheet.create({
  default: {
    fontSize: 16,
    lineHeight: 24,
    fontFamily: 'SpaceMono',
  },
  defaultSemiBold: {
    fontSize: 16,
    lineHeight: 24,
    fontWeight: '600',
    fontFamily: 'SpaceMono',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    lineHeight: 32,
    fontFamily: 'SpaceMono',
  },
  subtitle: {
    fontSize: 20,
    fontWeight: 'bold',
    fontFamily: 'SpaceMono',
  },
  link: {
    lineHeight: 24,
    fontSize: 16,
    textDecorationLine: 'underline',
    fontFamily: 'SpaceMono',
  },
});
</file>

<file path="components/ThemedView.tsx">
import { View, type ViewProps, StyleSheet } from 'react-native';
import { useTheme } from '@/theme/ThemeProvider';
export type ThemedViewProps = ViewProps & {
  customColor?: string;
  variant?: 'default' | 'card' | 'paper';
};
export function ThemedView({ 
  style, 
  customColor, 
  variant = 'default',
  ...otherProps 
}: ThemedViewProps) {
  const { colors } = useTheme();
  // Use provided color, otherwise use theme color
  const backgroundColor = customColor || colors.background;
  // Apply variant-specific styling
  const getVariantStyle = () => {
    switch (variant) {
      case 'card':
        return styles.card;
      case 'paper':
        return styles.paper;
      default:
        return {};
    }
  };
  return (
    <View 
      style={[
        { backgroundColor }, 
        getVariantStyle(),
        variant === 'card' ? { borderColor: colors.separator } : undefined,
        variant === 'paper' ? { borderColor: colors.separator } : undefined,
        style
      ]} 
      {...otherProps} 
    />
  );
}
const styles = StyleSheet.create({
  card: {
    borderWidth: 1,
    borderRadius: 8,
    padding: 16,
    marginVertical: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  paper: {
    borderWidth: 1,
    borderRadius: 4,
    padding: 12,
    marginVertical: 4,
  }
});
</file>

<file path="components/VoiceIndicator.tsx">
import React, { useEffect, useRef } from 'react';
import { StyleSheet, Animated, View, TouchableOpacity, Dimensions } from 'react-native';
import ThemedText from './ThemedText';
import { useVoice } from '@/context/VoiceContext';
import { useTheme } from '@/theme/ThemeProvider';
const { width } = Dimensions.get('window');
export default function VoiceIndicator() {
  const { voiceState, startListening, stopListening } = useVoice();
  const { colors } = useTheme();
  const animation = useRef(new Animated.Value(0)).current;
  // Animate dots when listening or speaking
  useEffect(() => {
    if (voiceState.isListening || voiceState.isSpeaking) {
      // Create continuous pulse animation
      Animated.loop(
        Animated.sequence([
          Animated.timing(animation, {
            toValue: 1,
            duration: 600,
            useNativeDriver: true,
          }),
          Animated.timing(animation, {
            toValue: 0,
            duration: 600,
            useNativeDriver: true,
          }),
        ])
      ).start();
    } else {
      // Stop animation when not listening/speaking
      animation.stopAnimation();
      animation.setValue(0);
    }
  }, [voiceState.isListening, voiceState.isSpeaking, animation]);
  // Scale interpolation for dots
  const firstDotScale = animation.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 1.5]
  });
  const secondDotScale = animation.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 1.8]
  });
  const thirdDotScale = animation.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 1.5]
  });
  // Toggle voice listening
  const toggleVoice = async () => {
    if (voiceState.isListening) {
      await stopListening();
    } else {
      await startListening();
    }
  };
  // Determine indicator color based on state
  const getIndicatorColor = () => {
    if (voiceState.error) return colors.error;
    if (voiceState.isSpeaking) return colors.primary;
    if (voiceState.isListening) return colors.success;
    return colors.text;
  };
  return (
    <TouchableOpacity
      style={[
        styles.container,
        { backgroundColor: colors.card }
      ]}
      onPress={toggleVoice}
      activeOpacity={0.7}
    >
      <View style={styles.dotsContainer}>
        <Animated.View
          style={[
            styles.dot,
            { backgroundColor: getIndicatorColor(), transform: [{ scale: firstDotScale }] }
          ]}
        />
        <Animated.View
          style={[
            styles.dot,
            { backgroundColor: getIndicatorColor(), transform: [{ scale: secondDotScale }] }
          ]}
        />
        <Animated.View
          style={[
            styles.dot,
            { backgroundColor: getIndicatorColor(), transform: [{ scale: thirdDotScale }] }
          ]}
        />
      </View>
      {voiceState.error && (
        <ThemedText style={styles.errorText}>
          Error: {voiceState.error}
        </ThemedText>
      )}
    </TouchableOpacity>
  );
}
const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    borderRadius: 25,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
    zIndex: 999,
  },
  dotsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    width: 50,
  },
  dot: {
    width: 10,
    height: 10,
    borderRadius: 5,
    marginHorizontal: 2,
  },
  errorText: {
    fontSize: 10,
    marginTop: 4,
    maxWidth: width * 0.3,
  },
});
</file>

<file path="constants/Colors.ts">
/**
 * Below are the colors for the e-ink themed app with a monochrome, sepia feel.
 * The colors are designed to mimic an e-reader experience with a warm, paper-like appearance.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */
// E-ink sepia tones
const paperLight = '#f8f3e8'; // Light sepia paper color
const paperDark = '#e8e1d9';  // Slightly darker sepia
const inkColor = '#5b4636';   // Dark brown ink color
const accentSepia = '#b38a5b'; // Warm accent color
export const Colors = {
  text: inkColor,
  background: paperLight,
  tint: accentSepia,
  icon: '#8a7b6b',
  tabIconDefault: '#8a7b6b',
  tabIconSelected: inkColor,
  paperTexture: paperDark,  // For subtle texture elements
  separator: '#d9d0c1',     // Subtle separator color
};
</file>

<file path="context/VoiceContext.tsx">
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import VoiceService, { VoiceState } from '@/services/voice';
import { useAppDispatch } from '@/hooks/useRedux';
import { setVoiceState } from '@/store/slices/voiceSlice';
type VoiceContextType = {
  voiceState: VoiceState;
  startListening: () => Promise<void>;
  stopListening: () => Promise<void>;
  isInitialized: boolean;
};
const VoiceContext = createContext<VoiceContextType | undefined>(undefined);
type VoiceProviderProps = {
  children: ReactNode;
};
export const VoiceProvider = ({ children }: VoiceProviderProps) => {
  const [voiceService] = useState(() => VoiceService.getInstance());
  const [voiceState, setVoiceStateLocal] = useState<VoiceState>(voiceService.state);
  const [isInitialized, setIsInitialized] = useState(false);
  const dispatch = useAppDispatch();
  useEffect(() => {
    // Subscribe to state changes from the voice service
    const unsubscribe = voiceService.subscribe((state) => {
      setVoiceStateLocal(state);
      dispatch(setVoiceState(state));
    });
    // Initialize the voice service
    const initializeVoiceService = async () => {
      try {
        await voiceService.initialize();
        setIsInitialized(true);
      } catch (error) {
        console.error('Failed to initialize voice service:', error);
      }
    };
    initializeVoiceService();
    // Clean up when the provider is unmounted
    return () => {
      unsubscribe();
      voiceService.disconnect();
    };
  }, [dispatch]);
  const startListening = async () => {
    try {
      await voiceService.startListening();
    } catch (error) {
      console.error('Failed to start listening:', error);
    }
  };
  const stopListening = async () => {
    try {
      await voiceService.stopListening();
    } catch (error) {
      console.error('Failed to stop listening:', error);
    }
  };
  return (
    <VoiceContext.Provider
      value={{
        voiceState,
        startListening,
        stopListening,
        isInitialized,
      }}
    >
      {children}
    </VoiceContext.Provider>
  );
};
// Custom hook to use the voice context
export const useVoice = () => {
  const context = useContext(VoiceContext);
  if (context === undefined) {
    throw new Error('useVoice must be used within a VoiceProvider');
  }
  return context;
};
</file>

<file path="hooks/useRedux.ts">
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import type { RootState, AppDispatch } from '../store';
// Use throughout the app instead of plain `useDispatch` and `useSelector`
export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
</file>

<file path="hooks/useThemeColor.ts">
/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */
import { Colors } from '@/constants/Colors';
/**
 * Simple hook to access theme colors
 */
export function useThemeColor(colorName: keyof typeof Colors) {
  return Colors[colorName];
}
</file>

<file path="ios/ThePrimer/Images.xcassets/AppIcon.appiconset/Contents.json">
{
  "images": [
    {
      "filename": "App-Icon-1024x1024@1x.png",
      "idiom": "universal",
      "platform": "ios",
      "size": "1024x1024"
    }
  ],
  "info": {
    "version": 1,
    "author": "expo"
  }
}
</file>

<file path="ios/ThePrimer/Images.xcassets/SplashScreenBackground.colorset/Contents.json">
{
  "colors": [
    {
      "color": {
        "components": {
          "alpha": "1.000",
          "blue": "0.909803921568627",
          "green": "0.952941176470588",
          "red": "0.972549019607843"
        },
        "color-space": "srgb"
      },
      "idiom": "universal"
    }
  ],
  "info": {
    "version": 1,
    "author": "expo"
  }
}
</file>

<file path="ios/ThePrimer/Images.xcassets/SplashScreenLogo.imageset/Contents.json">
{
  "images": [
    {
      "idiom": "universal",
      "filename": "image.png",
      "scale": "1x"
    },
    {
      "idiom": "universal",
      "filename": "image@2x.png",
      "scale": "2x"
    },
    {
      "idiom": "universal",
      "filename": "image@3x.png",
      "scale": "3x"
    }
  ],
  "info": {
    "version": 1,
    "author": "expo"
  }
}
</file>

<file path="ios/ThePrimer/Images.xcassets/Contents.json">
{
  "info" : {
    "version" : 1,
    "author" : "expo"
  }
}
</file>

<file path="ios/ThePrimer/Supporting/Expo.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>EXUpdatesCheckOnLaunch</key>
    <string>NEVER</string>
    <key>EXUpdatesEnabled</key>
    <false/>
    <key>EXUpdatesLaunchWaitMs</key>
    <integer>0</integer>
  </dict>
</plist>
</file>

<file path="ios/ThePrimer/AppDelegate.h">
#import <RCTAppDelegate.h>
#import <UIKit/UIKit.h>
#import <Expo/Expo.h>

@interface AppDelegate : EXAppDelegateWrapper

@end
</file>

<file path="ios/ThePrimer/AppDelegate.mm">
#import "AppDelegate.h"

#import <React/RCTBundleURLProvider.h>
#import <React/RCTLinkingManager.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  self.moduleName = @"main";

  // You can add your custom initial props in the dictionary below.
  // They will be passed down to the ViewController used by React Native.
  self.initialProps = @{};

  return [super application:application didFinishLaunchingWithOptions:launchOptions];
}

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
  return [self bundleURL];
}

- (NSURL *)bundleURL
{
#if DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@".expo/.virtual-metro-entry"];
#else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}

// Linking API
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
  return [super application:application openURL:url options:options] || [RCTLinkingManager application:application openURL:url options:options];
}

// Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
  BOOL result = [RCTLinkingManager application:application continueUserActivity:userActivity restorationHandler:restorationHandler];
  return [super application:application continueUserActivity:userActivity restorationHandler:restorationHandler] || result;
}

// Explicitly define remote notification delegates to ensure compatibility with some third-party libraries
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  return [super application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

// Explicitly define remote notification delegates to ensure compatibility with some third-party libraries
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
  return [super application:application didFailToRegisterForRemoteNotificationsWithError:error];
}

// Explicitly define remote notification delegates to ensure compatibility with some third-party libraries
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
  return [super application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
}

@end
</file>

<file path="ios/ThePrimer/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>CADisableMinimumFrameDurationOnPhone</key>
    <true/>
    <key>CFBundleDevelopmentRegion</key>
    <string>$(DEVELOPMENT_LANGUAGE)</string>
    <key>CFBundleDisplayName</key>
    <string>The Primer</string>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIdentifier</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$(PRODUCT_NAME)</string>
    <key>CFBundlePackageType</key>
    <string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0.0</string>
    <key>CFBundleSignature</key>
    <string>????</string>
    <key>CFBundleURLTypes</key>
    <array>
      <dict>
        <key>CFBundleURLSchemes</key>
        <array>
          <string>myapp</string>
          <string>com.calemcnulty.primerapp</string>
        </array>
      </dict>
    </array>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSMinimumSystemVersion</key>
    <string>12.0</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    <key>NSAppTransportSecurity</key>
    <dict>
      <key>NSAllowsArbitraryLoads</key>
      <false/>
      <key>NSAllowsLocalNetworking</key>
      <true/>
    </dict>
    <key>NSCameraUsageDescription</key>
    <string>This app uses the camera for WebRTC communication.</string>
    <key>NSMicrophoneUsageDescription</key>
    <string>Allow $(PRODUCT_NAME) to access your microphone for voice interaction.</string>
    <key>NSUserActivityTypes</key>
    <array>
      <string>$(PRODUCT_BUNDLE_IDENTIFIER).expo.index_route</string>
    </array>
    <key>RCTRootViewBackgroundColor</key>
    <integer>4294505448</integer>
    <key>UILaunchStoryboardName</key>
    <string>SplashScreen</string>
    <key>UIRequiredDeviceCapabilities</key>
    <array>
      <string>arm64</string>
    </array>
    <key>UIRequiresFullScreen</key>
    <false/>
    <key>UIStatusBarStyle</key>
    <string>UIStatusBarStyleDefault</string>
    <key>UISupportedInterfaceOrientations</key>
    <array>
      <string>UIInterfaceOrientationPortrait</string>
      <string>UIInterfaceOrientationPortraitUpsideDown</string>
    </array>
    <key>UISupportedInterfaceOrientations~ipad</key>
    <array>
      <string>UIInterfaceOrientationPortrait</string>
      <string>UIInterfaceOrientationPortraitUpsideDown</string>
      <string>UIInterfaceOrientationLandscapeLeft</string>
      <string>UIInterfaceOrientationLandscapeRight</string>
    </array>
    <key>UIUserInterfaceStyle</key>
    <string>Automatic</string>
    <key>UIViewControllerBasedStatusBarAppearance</key>
    <false/>
  </dict>
</plist>
</file>

<file path="ios/ThePrimer/main.m">
#import <UIKit/UIKit.h>

#import "AppDelegate.h"

int main(int argc, char * argv[]) {
  @autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
  }
}
</file>

<file path="ios/ThePrimer/noop-file.swift">
//
// @generated
// A blank Swift file must be created for native modules with Swift files to work correctly.
//
</file>

<file path="ios/ThePrimer/PrivacyInfo.xcprivacy">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSPrivacyAccessedAPITypes</key>
	<array>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>C617.1</string>
				<string>0A2A.1</string>
				<string>3B52.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryUserDefaults</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>CA92.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryDiskSpace</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>E174.1</string>
				<string>85F4.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategorySystemBootTime</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>35F9.1</string>
			</array>
		</dict>
	</array>
	<key>NSPrivacyCollectedDataTypes</key>
	<array/>
	<key>NSPrivacyTracking</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/ThePrimer/SplashScreen.storyboard">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="32700.99.1234" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="EXPO-VIEWCONTROLLER-1">
    <device id="retina6_12" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22685"/>
        <capability name="Named colors" minToolsVersion="9.0"/>
        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <scene sceneID="EXPO-SCENE-1">
            <objects>
                <viewController storyboardIdentifier="SplashScreenViewController" id="EXPO-VIEWCONTROLLER-1" sceneMemberID="viewController">
                    <view key="view" userInteractionEnabled="NO" contentMode="scaleToFill" insetsLayoutMarginsFromSafeArea="NO" id="EXPO-ContainerView" userLabel="ContainerView">
                        <rect key="frame" x="0.0" y="0.0" width="393" height="852"/>
                        <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                        <subviews>
                            <imageView id="EXPO-SplashScreen" userLabel="SplashScreenLogo" image="SplashScreenLogo" contentMode="scaleAspectFit" clipsSubviews="true" userInteractionEnabled="false" translatesAutoresizingMaskIntoConstraints="false">
                                <rect key="frame" x="0" y="0" width="414" height="736"/>
                            </imageView>
                        </subviews>
                        <viewLayoutGuide key="safeArea" id="Rmq-lb-GrQ"/>
                        <constraints>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="top" secondItem="EXPO-ContainerView" secondAttribute="top" id="83fcb9b545b870ba44c24f0feeb116490c499c52"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="leading" secondItem="EXPO-ContainerView" secondAttribute="leading" id="61d16215e44b98e39d0a2c74fdbfaaa22601b12c"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="trailing" secondItem="EXPO-ContainerView" secondAttribute="trailing" id="f934da460e9ab5acae3ad9987d5b676a108796c1"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="bottom" secondItem="EXPO-ContainerView" secondAttribute="bottom" id="d6a0be88096b36fb132659aa90203d39139deda9"/>
                        </constraints>
                        <color key="backgroundColor" name="SplashScreenBackground"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="EXPO-PLACEHOLDER-1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="0.0" y="0.0"/>
        </scene>
    </scenes>
    <resources>
        <image name="SplashScreenLogo" width="414" height="736"/>
        <namedColor name="SplashScreenBackground">
            <color alpha="1.000" blue="0.909803921568627" green="0.952941176470588" red="0.972549019607843" customColorSpace="sRGB" colorSpace="custom"/>
        </namedColor>
    </resources>
</document>
</file>

<file path="ios/ThePrimer/ThePrimer-Bridging-Header.h">
//
//  Use this file to import your target's public headers that you would like to expose to Swift.
//
</file>

<file path="ios/ThePrimer/ThePrimer.entitlements">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict/>
</plist>
</file>

<file path="ios/ThePrimer.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/ThePrimer.xcodeproj/project.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>
</file>

<file path="ios/ThePrimer.xcodeproj/xcshareddata/xcschemes/ThePrimer.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1130"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
               BuildableName = "ThePrimer.app"
               BlueprintName = "ThePrimer"
               ReferencedContainer = "container:ThePrimer.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "00E356ED1AD99517003FC87E"
               BuildableName = "ThePrimerTests.xctest"
               BlueprintName = "ThePrimerTests"
               ReferencedContainer = "container:ThePrimer.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "ThePrimer.app"
            BlueprintName = "ThePrimer"
            ReferencedContainer = "container:ThePrimer.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "ThePrimer.app"
            BlueprintName = "ThePrimer"
            ReferencedContainer = "container:ThePrimer.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="ios/ThePrimer.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:ThePrimer.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>
</file>

<file path="ios/.gitignore">
# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
project.xcworkspace
.xcode.env.local

# Bundle artifacts
*.jsbundle

# CocoaPods
/Pods/
</file>

<file path="ios/Podfile">
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'ThePrimer' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end
</file>

<file path="ios/Podfile.properties.json">
{
  "expo.jsEngine": "hermes",
  "EX_DEV_CLIENT_NETWORK_INSPECTOR": "true",
  "newArchEnabled": "true"
}
</file>

<file path="scripts/clear-cache.js">
#!/usr/bin/env node
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');
console.log('🧹 Clearing Expo and React Native caches...');
// Define directories to clean
const cacheDirectories = [
  // Project cache
  '.expo',
  'node_modules/.cache',
  // Android specific
  'android/build',
  'android/app/build',
  // iOS specific
  'ios/build',
  'ios/Pods',
];
// Check if directories exist and remove them
cacheDirectories.forEach(dir => {
  const dirPath = path.join(process.cwd(), dir);
  if (fs.existsSync(dirPath)) {
    console.log(`Removing ${dir}...`);
    try {
      if (os.platform() === 'win32') {
        execSync(`rmdir /s /q "${dirPath}"`);
      } else {
        execSync(`rm -rf "${dirPath}"`);
      }
    } catch (error) {
      console.error(`Failed to remove ${dir}: ${error.message}`);
    }
  }
});
// Clear watchman watches
try {
  console.log('Clearing Watchman watches...');
  execSync('watchman watch-del-all', { stdio: 'inherit' });
} catch (error) {
  console.log('Watchman not installed or failed to clear watches');
}
// Clear Metro cache
try {
  console.log('Clearing Metro bundler cache...');
  execSync('npx react-native start --reset-cache --no-interactive', { 
    stdio: 'inherit',
    timeout: 5000 // Kill after 5 seconds
  });
} catch (error) {
  console.log('Metro cache reset initiated');
}
// Clear Expo's cache
try {
  console.log('Clearing Expo cache...');
  execSync('npx expo doctor --fix', { stdio: 'inherit' });
  execSync('npx expo-cli client:install:local', { stdio: 'inherit' });
} catch (error) {
  console.log('Expo cache clearing commands completed with possible warnings');
}
console.log('\n✅ Cache clearing complete!');
console.log('\nNext steps:');
console.log('1. On your Android device, completely uninstall the app');
console.log('2. In Android Settings, go to Apps or Application Manager');
console.log('3. Find and clear cache for Expo Go (if using Expo Go)');
console.log('4. Restart your device');
console.log('5. Run "npm run start:dev" to start the development server with a clean environment');
console.log('\nHappy coding! 🚀');
</file>

<file path="scripts/reset-project.js">
#!/usr/bin/env node
/**
 * This script is used to reset the project to a blank state.
 * It deletes or moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example based on user input and creates a new /app directory with an index.tsx and _layout.tsx file.
 * You can remove the `reset-project` script from package.json and safely delete this file after running it.
 */
const fs = require("fs");
const path = require("path");
const readline = require("readline");
const root = process.cwd();
const oldDirs = ["app", "components", "hooks", "constants", "scripts"];
const exampleDir = "app-example";
const newAppDir = "app";
const exampleDirPath = path.join(root, exampleDir);
const indexContent = `import { Text, View } from "react-native";
export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;
const layoutContent = `import { Stack } from "expo-router";
export default function RootLayout() {
  return <Stack />;
}
`;
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
const moveDirectories = async (userInput) => {
  try {
    if (userInput === "y") {
      // Create the app-example directory
      await fs.promises.mkdir(exampleDirPath, { recursive: true });
      console.log(`📁 /${exampleDir} directory created.`);
    }
    // Move old directories to new app-example directory or delete them
    for (const dir of oldDirs) {
      const oldDirPath = path.join(root, dir);
      if (fs.existsSync(oldDirPath)) {
        if (userInput === "y") {
          const newDirPath = path.join(root, exampleDir, dir);
          await fs.promises.rename(oldDirPath, newDirPath);
          console.log(`➡️ /${dir} moved to /${exampleDir}/${dir}.`);
        } else {
          await fs.promises.rm(oldDirPath, { recursive: true, force: true });
          console.log(`❌ /${dir} deleted.`);
        }
      } else {
        console.log(`➡️ /${dir} does not exist, skipping.`);
      }
    }
    // Create new /app directory
    const newAppDirPath = path.join(root, newAppDir);
    await fs.promises.mkdir(newAppDirPath, { recursive: true });
    console.log("\n📁 New /app directory created.");
    // Create index.tsx
    const indexPath = path.join(newAppDirPath, "index.tsx");
    await fs.promises.writeFile(indexPath, indexContent);
    console.log("📄 app/index.tsx created.");
    // Create _layout.tsx
    const layoutPath = path.join(newAppDirPath, "_layout.tsx");
    await fs.promises.writeFile(layoutPath, layoutContent);
    console.log("📄 app/_layout.tsx created.");
    console.log("\n✅ Project reset complete. Next steps:");
    console.log(
      `1. Run \`npx expo start\` to start a development server.\n2. Edit app/index.tsx to edit the main screen.${
        userInput === "y"
          ? `\n3. Delete the /${exampleDir} directory when you're done referencing it.`
          : ""
      }`
    );
  } catch (error) {
    console.error(`❌ Error during script execution: ${error.message}`);
  }
};
rl.question(
  "Do you want to move existing files to /app-example instead of deleting them? (Y/n): ",
  (answer) => {
    const userInput = answer.trim().toLowerCase() || "y";
    if (userInput === "y" || userInput === "n") {
      moveDirectories(userInput).finally(() => rl.close());
    } else {
      console.log("❌ Invalid input. Please enter 'Y' or 'N'.");
      rl.close();
    }
  }
);
</file>

<file path="services/api.ts">
import Constants from 'expo-constants';
import { Alert, Platform } from 'react-native';
import * as Application from 'expo-application';
// We need to handle special cases for the --localhost flag
// When using this flag, Expo Dev Server replaces 'localhost' with the actual LAN IP
// of your machine (e.g. 192.168.1.x or 10.10.1.x)
const getDevApiUrl = () => {
  // For development mode, use environment-specific URL
  if (Platform.OS === 'ios') {
    // iOS simulator can use localhost directly
    return 'http://localhost:3000';
  } else if (Platform.OS === 'android') {
    try {
      // Check for explicit API_URL in Constants first
      if (Constants.expoConfig?.extra?.androidApiUrl) {
        const url = Constants.expoConfig.extra.androidApiUrl;
        console.log('[API] Using Android API URL from config:', url);
        return url;
      }
      // When using --localhost flag with Android, Expo automatically 
      // replaces localhost in URLs with your machine's actual LAN IP address
      // So we can safely use localhost here
      console.log('[API] Using localhost for Android with --localhost flag');
      return 'http://localhost:3000';
    } catch (error) {
      console.error('[API] Error getting Android API URL:', error);
      console.log('[API] Using fallback Android API URL: http://localhost:3000');
      return 'http://localhost:3000';
    }
  } else {
    // Web platform
    return 'http://localhost:3000';
  }
};
// Get API URL with enhanced logging
const getApiUrl = () => {
  // In production, use the configured API URL
  if (Constants.expoConfig?.extra?.environment === 'production') {
    const prodUrl = Constants.expoConfig?.extra?.apiUrl || '';
    console.log(`[API] Using production API URL: ${prodUrl}`);
    return prodUrl;
  }
  // In development, get the appropriate dev URL
  const devUrl = getDevApiUrl();
  console.log(`[API] Using development API URL: ${devUrl} on ${Platform.OS}`);
  return devUrl;
};
const API_URL = getApiUrl();
// Add retry logic for network operations (especially important for Android)
const fetchWithRetry = async (url: string, options: RequestInit = {}, retries = 5, delay = 500): Promise<Response> => {
  let lastError;
  for (let attempt = 0; attempt < retries; attempt++) {
    try {
      console.log(`[API] Fetch attempt ${attempt + 1}/${retries} for ${url}`);
      const response = await fetch(url, options);
      console.log(`[API] Fetch successful on attempt ${attempt + 1}`);
      return response;
    } catch (error) {
      lastError = error;
      console.error(`[API] Fetch attempt ${attempt + 1} failed:`, error);
      if (attempt === retries - 1) {
        console.error(`[API] All ${retries} retry attempts failed for ${url}`);
        break;
      }
      const waitTime = delay * Math.pow(1.5, attempt);
      console.log(`[API] Waiting ${waitTime}ms before retry ${attempt + 2}`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  throw lastError;
};
// Get device ID for API requests
const getDeviceId = async (): Promise<string> => {
  let deviceId = '';
  try {
    if (Platform.OS === 'ios') {
      deviceId = await Application.getIosIdForVendorAsync() || '';
    } else if (Platform.OS === 'android') {
      deviceId = await Application.getAndroidId() || '';
    } else {
      // Web platform - generate a consistent ID and store in localStorage
      const storedId = localStorage.getItem('deviceId');
      if (storedId) {
        deviceId = storedId;
      } else {
        deviceId = `web-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
        localStorage.setItem('deviceId', deviceId);
      }
    }
  } catch (error) {
    console.error('[API] Error getting device ID:', error);
    deviceId = `fallback-${Platform.OS}-${Date.now()}`;
  }
  console.log(`[API] Using device ID: ${deviceId.substring(0, 8)}...`);
  return deviceId;
};
// Generic fetch function with error handling
async function apiFetch<T>(
  endpoint: string, 
  options: RequestInit = {}
): Promise<T> {
  try {
    const deviceId = await getDeviceId();
    // Merge default headers with provided options
    const mergedOptions: RequestInit = {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': deviceId,
        ...options.headers,
      },
    };
    // Log request in development
    if (Constants.expoConfig?.extra?.environment === 'development') {
      console.log(`[API] Request: ${API_URL}${endpoint}`, {
        method: mergedOptions.method || 'GET',
        headers: mergedOptions.headers,
        body: mergedOptions.body ? JSON.parse(mergedOptions.body as string) : undefined
      });
    }
    // Use fetchWithRetry instead of fetch for better reliability on Android
    const response = await fetchWithRetry(`${API_URL}${endpoint}`, mergedOptions);
    // Log raw response in development
    if (Constants.expoConfig?.extra?.environment === 'development') {
      console.log(`[API] Raw Response: ${API_URL}${endpoint}`, {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries([...response.headers.entries()])
      });
    }
    // Check for non-JSON responses or HTML error pages
    const contentType = response.headers.get('content-type');
    if (contentType && !contentType.includes('application/json')) {
      console.error(`[API] Received non-JSON response with content type: ${contentType}`);
      throw new Error(`Unexpected response type: ${contentType}`);
    }
    // Parse JSON response
    const data = await response.json();
    // Log parsed response in development
    if (Constants.expoConfig?.extra?.environment === 'development') {
      console.log(`[API] Response Data: ${API_URL}${endpoint}`, data);
    }
    // Check if response is ok
    if (!response.ok) {
      throw new Error(data.message || 'API request failed');
    }
    return data as T;
  } catch (error) {
    console.error('[API] Request error:', error);
    // Add more detailed info to help debug connection issues
    if (error instanceof TypeError && error.message.includes('Network request failed')) {
      console.error(`[API] Network request failed to ${API_URL}${endpoint}. Make sure your API server is running at ${API_URL}.`);
      // Additional helpful message for --localhost specific issues
      if (API_URL.includes('localhost')) {
        console.error(`
[API] When using --localhost flag:
1. Ensure your API server is running and bound to 0.0.0.0 (all interfaces), not just 127.0.0.1
2. Check that your computer's firewall allows incoming connections on port 3000
3. Verify that both your device and computer are on the same network
4. Your actual API URL on the device will be something like http://YOUR_COMPUTER_IP:3000`);
      }
    }
    // Platform-specific error handling
    if (Platform.OS === 'android') {
      // On Android, provide a graceful fallback for network errors
      if (endpoint.includes('/rtvi/conversation')) {
        console.log('[API] Returning empty conversation for Android due to network error');
        return { 
          success: true, 
          conversation: [],
          message: {
            id: 'system-message',
            content: 'Connection temporarily unavailable. Please try again when your network connection improves.',
            timestamp: new Date().toISOString(),
            fromUser: false
          }
        } as unknown as T;
      } else if (endpoint.includes('/story/current')) {
        console.log('[API] Returning fallback story segment for Android due to network error');
        return {
          success: true,
          segment: {
            id: 'fallback-segment',
            content: 'Unable to connect to the story server. Please check your internet connection and try again.',
            choices: [{ id: 'retry', text: 'Retry Connection' }]
          },
          state: {
            userId: deviceId || 'unknown',
            currentSegmentId: 'fallback-segment',
            progress: 0,
            contextualData: {},
            readSegments: [],
            isConversationalMode: false,
            recentConversation: []
          }
        } as unknown as T;
      }
    }
    // Show alert with error message in development
    if (Constants.expoConfig?.extra?.environment === 'development') {
      let errorMessage = 'Unknown error';
      if (error instanceof Error) {
        errorMessage = error.message;
        if (error.message.includes('Network request failed')) {
          errorMessage += `\n\nMake sure your API server is running at ${API_URL}`;
          if (API_URL.includes('localhost')) {
            errorMessage += `\n\nWith --localhost flag, your API server must be bound to 0.0.0.0:3000, not just localhost:3000`;
          }
        }
      }
      Alert.alert('[API] Error', errorMessage);
    }
    throw error;
  }
};
// Types for Story API responses
export interface StorySegment {
  segmentId: string;
  title: string;
  content: string;
  choices: StoryChoice[];
}
export interface StoryChoice {
  choiceId: string;
  text: string;
}
// New API response interfaces to match the server's format
export interface ApiSegment {
  id: string;
  content: string;
  choices: Array<{id: string; text: string}>;
}
export interface ApiStoryResponse {
  success: boolean;
  segment: ApiSegment;
  state: {
    userId: string;
    currentSegmentId: string;
    progress: number;
    contextualData: any;
    readSegments: string[];
    isConversationalMode: boolean;
    recentConversation: any[];
  };
}
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  error?: string;
  message?: string;
}
// RTVI (Real-Time Voice Interaction) interfaces
export interface RtviMessage {
  id: string;
  content: string;
  timestamp: string;
  fromUser: boolean;
}
export interface RtviResponse {
  success: boolean;
  message: RtviMessage;
  conversation: RtviMessage[];
}
// API methods
export const api = {
  // Story related endpoints
  story: {
    // Get current story segment
    getCurrentSegment: async () => {
      return apiFetch<ApiStoryResponse>('/api/v1/story/current');
    },
    // Make a choice to progress the story
    makeChoice: async (choiceId: string) => {
      return apiFetch<ApiStoryResponse>('/api/v1/story/choice', {
        method: 'POST',
        body: JSON.stringify({ choiceId }),
      });
    },
    // Reset the story to the beginning
    resetStory: async () => {
      return apiFetch<ApiStoryResponse>('/api/v1/story/reset', {
        method: 'POST',
      });
    },
  },
  // User related endpoints (even though we don't have auth, we track device)
  user: {
    // Get or create user profile based on device ID
    getProfile: async () => {
      return apiFetch<{id: string; settings: any}>('/api/v1/user/profile');
    },
    // Update user settings
    updateSettings: async (settings: any) => {
      return apiFetch<{success: boolean}>('/api/v1/user/settings', {
        method: 'PUT',
        body: JSON.stringify(settings),
      });
    },
  },
  // RTVI (Real-Time Voice Interaction) endpoints
  rtvi: {
    // Get conversation history
    getConversation: async () => {
      return apiFetch<RtviResponse>('/api/v1/rtvi/conversation');
    },
    // Send a message to RTVI
    sendMessage: async (message: string) => {
      return apiFetch<RtviResponse>('/api/v1/rtvi/message', {
        method: 'POST',
        body: JSON.stringify({ message }),
      });
    },
    // Start a new RTVI conversation
    startNewConversation: async () => {
      return apiFetch<RtviResponse>('/api/v1/rtvi/new', {
        method: 'POST',
      });
    },
  },
};
export default api;
</file>

<file path="services/voice.ts">
import {
  RTCPeerConnection,
  MediaStream,
  mediaDevices,
  RTCSessionDescription,
  RTCIceCandidate,
} from 'react-native-webrtc';
import Constants from 'expo-constants';
export type VoiceState = {
  isConnected: boolean;
  isListening: boolean;
  isSpeaking: boolean;
  error: string | null;
};
export type VoiceStateChangeCallback = (state: VoiceState) => void;
class VoiceService {
  private static instance: VoiceService;
  private peerConnection: RTCPeerConnection | null = null;
  private localStream: MediaStream | null = null;
  private remoteStream: MediaStream | null = null;
  private websocket: WebSocket | null = null;
  private _state: VoiceState = {
    isConnected: false,
    isListening: false,
    isSpeaking: false,
    error: null,
  };
  // Event callbacks
  private onStateChangeCallbacks: VoiceStateChangeCallback[] = [];
  private constructor() {
    // Private constructor for singleton pattern
  }
  public static getInstance(): VoiceService {
    if (!VoiceService.instance) {
      VoiceService.instance = new VoiceService();
    }
    return VoiceService.instance;
  }
  get state(): VoiceState {
    return { ...this._state };
  }
  private setState(newState: Partial<VoiceState>) {
    this._state = { ...this._state, ...newState };
    this.notifyStateChange();
  }
  private notifyStateChange() {
    this.onStateChangeCallbacks.forEach(callback => callback(this._state));
  }
  public subscribe(callback: VoiceStateChangeCallback): () => void {
    this.onStateChangeCallbacks.push(callback);
    // Return unsubscribe function
    return () => {
      this.onStateChangeCallbacks = this.onStateChangeCallbacks.filter(cb => cb !== callback);
    };
  }
  public async initialize(): Promise<void> {
    try {
      await this.setupWebRTC();
      await this.connectToSignalingServer();
      this.setState({ isConnected: true, error: null });
    } catch (error) {
      this.setState({ error: error instanceof Error ? error.message : 'Failed to initialize voice service' });
      throw error;
    }
  }
  private async setupWebRTC(): Promise<void> {
    // Setup WebRTC peer connection
    const configuration = {
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    };
    this.peerConnection = new RTCPeerConnection(configuration);
    // Handle ICE candidates
    this.peerConnection.onicecandidate = (event) => {
      if (event.candidate && this.websocket && this.websocket.readyState === WebSocket.OPEN) {
        this.websocket.send(JSON.stringify({
          type: 'ice-candidate',
          candidate: event.candidate.toJSON()
        }));
      }
    };
    // Handle incoming tracks
    this.peerConnection.ontrack = (event) => {
      this.remoteStream = event.streams[0];
      this.handleIncomingAudio(this.remoteStream);
    };
    // Request audio permissions and set up local stream
    try {
      const stream = await mediaDevices.getUserMedia({ audio: true });
      this.localStream = stream;
      if (this.peerConnection) {
        this.localStream.getTracks().forEach(track => {
          if (this.peerConnection && this.localStream) {
            this.peerConnection.addTrack(track, this.localStream);
          }
        });
      }
    } catch (error) {
      throw new Error('Failed to access microphone');
    }
  }
  private connectToSignalingServer(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Get the voice API URL from app config
      const voiceApiUrl = Constants.expoConfig?.extra?.voiceApiUrl || 'wss://primer.calemcnulty.com/api/v1/voice';
      this.websocket = new WebSocket(voiceApiUrl);
      this.websocket.onopen = async () => {
        // Initiate the WebRTC connection by creating and sending an offer
        try {
          await this.createAndSendOffer();
          resolve();
        } catch (error) {
          reject(new Error('Failed to create and send offer'));
        }
      };
      this.websocket.onerror = (error) => {
        reject(new Error('Failed to connect to signaling server'));
      };
      this.websocket.onmessage = async (event) => {
        const message = JSON.parse(event.data);
        switch (message.type) {
          case 'offer':
            await this.handleOffer(message);
            break;
          case 'answer':
            await this.handleAnswer(message);
            break;
          case 'ice-candidate':
            await this.handleIceCandidate(message);
            break;
          case 'speaking-start':
            this.setState({ isSpeaking: true });
            break;
          case 'speaking-end':
            this.setState({ isSpeaking: false });
            break;
          default:
            console.warn('Unknown message type:', message.type);
        }
      };
      this.websocket.onclose = () => {
        this.setState({ isConnected: false });
      };
    });
  }
  // New method to create and send offer
  private async createAndSendOffer(): Promise<void> {
    if (!this.peerConnection) {
      throw new Error('Peer connection not initialized');
    }
    try {
      // Create offer
      const offer = await this.peerConnection.createOffer();
      // Set local description
      await this.peerConnection.setLocalDescription(offer);
      // Send offer to server
      if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
        this.websocket.send(JSON.stringify({
          type: 'offer',
          sdp: this.peerConnection.localDescription
        }));
      } else {
        throw new Error('WebSocket not connected');
      }
    } catch (error) {
      console.error('Error creating offer:', error);
      throw error;
    }
  }
  private async handleOffer(message: any): Promise<void> {
    if (!this.peerConnection) return;
    await this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp));
    const answer = await this.peerConnection.createAnswer();
    await this.peerConnection.setLocalDescription(answer);
    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
      this.websocket.send(JSON.stringify({
        type: 'answer',
        sdp: this.peerConnection.localDescription
      }));
    }
  }
  private async handleAnswer(message: any): Promise<void> {
    if (!this.peerConnection) return;
    try {
      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp));
      // Connection is fully established at this point
      this.setState({ isConnected: true });
    } catch (error) {
      console.error('Error setting remote description:', error);
      this.setState({ error: 'Failed to establish connection' });
    }
  }
  private async handleIceCandidate(message: any): Promise<void> {
    if (!this.peerConnection) return;
    try {
      await this.peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
    } catch (error) {
      console.error('Error adding ice candidate:', error);
    }
  }
  private handleIncomingAudio(stream: MediaStream): void {
    // Process incoming audio stream
    // In a real implementation, this would play the audio
    this.setState({ isSpeaking: true });
    // Example: detect when the audio stream ends
    stream.getAudioTracks()[0].onended = () => {
      this.setState({ isSpeaking: false });
    };
  }
  public async startListening(): Promise<void> {
    if (!this.isInitialized()) {
      await this.initialize();
    }
    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
      this.websocket.send(JSON.stringify({ type: 'start-listening' }));
      this.setState({ isListening: true });
    } else {
      throw new Error('WebSocket connection not established');
    }
  }
  public async stopListening(): Promise<void> {
    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
      this.websocket.send(JSON.stringify({ type: 'stop-listening' }));
      this.setState({ isListening: false });
    }
  }
  private isInitialized(): boolean {
    return !!this.peerConnection && !!this.localStream && !!this.websocket;
  }
  public async disconnect(): Promise<void> {
    this.stopListening();
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
    }
    if (this.peerConnection) {
      this.peerConnection.close();
      this.peerConnection = null;
    }
    if (this.websocket) {
      this.websocket.close();
      this.websocket = null;
    }
    this.setState({
      isConnected: false,
      isListening: false,
      isSpeaking: false
    });
  }
}
export default VoiceService;
</file>

<file path="store/slices/rtviSlice.ts">
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { api, RtviMessage, RtviResponse } from '@/services/api';
// Define the initial state
interface RtviState {
  conversation: RtviMessage[];
  isLoading: boolean;
  error: string | null;
  isListening: boolean;
}
const initialState: RtviState = {
  conversation: [],
  isLoading: false,
  error: null,
  isListening: false,
};
// Async thunks
export const fetchConversation = createAsyncThunk(
  'rtvi/fetchConversation',
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.rtvi.getConversation();
      if (!response.success) {
        return rejectWithValue('Failed to fetch conversation');
      }
      return response.conversation;
    } catch (error) {
      console.error('Error fetching RTVI conversation:', error);
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('Failed to fetch RTVI conversation');
    }
  }
);
export const sendMessage = createAsyncThunk(
  'rtvi/sendMessage',
  async (message: string, { rejectWithValue }) => {
    try {
      const response = await api.rtvi.sendMessage(message);
      if (!response.success) {
        return rejectWithValue('Failed to send message');
      }
      return response;
    } catch (error) {
      console.error('Error sending RTVI message:', error);
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('Failed to send RTVI message');
    }
  }
);
export const startNewConversation = createAsyncThunk(
  'rtvi/startNewConversation',
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.rtvi.startNewConversation();
      if (!response.success) {
        return rejectWithValue('Failed to start new conversation');
      }
      return response.conversation;
    } catch (error) {
      console.error('Error starting new RTVI conversation:', error);
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('Failed to start new RTVI conversation');
    }
  }
);
// Create the slice
const rtviSlice = createSlice({
  name: 'rtvi',
  initialState,
  reducers: {
    setListening: (state, action: PayloadAction<boolean>) => {
      state.isListening = action.payload;
    },
    addLocalMessage: (state, action: PayloadAction<Omit<RtviMessage, 'id'>>) => {
      const newMessage = {
        ...action.payload,
        id: `local-${Date.now()}`,
      };
      state.conversation.push(newMessage);
    },
  },
  extraReducers: (builder) => {
    // Handle fetchConversation
    builder
      .addCase(fetchConversation.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(fetchConversation.fulfilled, (state, action) => {
        state.isLoading = false;
        state.conversation = action.payload;
      })
      .addCase(fetchConversation.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
    // Handle sendMessage
    builder
      .addCase(sendMessage.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(sendMessage.fulfilled, (state, action) => {
        state.isLoading = false;
        state.conversation = action.payload.conversation;
      })
      .addCase(sendMessage.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
    // Handle startNewConversation
    builder
      .addCase(startNewConversation.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(startNewConversation.fulfilled, (state, action) => {
        state.isLoading = false;
        state.conversation = action.payload;
      })
      .addCase(startNewConversation.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
  },
});
export const { setListening, addLocalMessage } = rtviSlice.actions;
export default rtviSlice.reducer;
</file>

<file path="store/slices/storySlice.ts">
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { api, StorySegment } from '@/services/api';
// Define the initial state
interface StoryState {
  currentSegment: StorySegment | null;
  isLoading: boolean;
  error: string | null;
  isTransitioning: boolean;
}
const initialState: StoryState = {
  currentSegment: null,
  isLoading: false,
  error: null,
  isTransitioning: false,
};
// Async thunks
export const fetchCurrentSegment = createAsyncThunk(
  'story/fetchCurrentSegment',
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.story.getCurrentSegment();
      // Handle API response format with success/data fields
      if (response.success === false) {
        return rejectWithValue('Failed to fetch story segment');
      }
      if (response.data) {
        return response.data;
      }
      // Handle new API response format where segment is at the top level
      if (response.segment) {
        return {
          segmentId: response.segment.id,
          title: response.segment.id.charAt(0).toUpperCase() + response.segment.id.slice(1),
          content: response.segment.content,
          choices: response.segment.choices ? response.segment.choices.map(choice => ({
            choiceId: choice.id,
            text: choice.text
          })) : []
        };
      }
      return response;
    } catch (error) {
      console.error('Error fetching story segment:', error);
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('Failed to fetch story segment');
    }
  }
);
export const makeChoice = createAsyncThunk(
  'story/makeChoice',
  async (choiceId: string, { rejectWithValue }) => {
    try {
      const response = await api.story.makeChoice(choiceId);
      // Handle API response format with success/data fields
      if (response.success === false) {
        return rejectWithValue('Failed to make choice');
      }
      if (response.data) {
        return response.data;
      }
      // Handle new API response format where segment is at the top level
      if (response.segment) {
        return {
          segmentId: response.segment.id,
          title: response.segment.id.charAt(0).toUpperCase() + response.segment.id.slice(1),
          content: response.segment.content,
          choices: response.segment.choices ? response.segment.choices.map(choice => ({
            choiceId: choice.id,
            text: choice.text
          })) : []
        };
      }
      return response;
    } catch (error) {
      console.error('Error making choice:', error);
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('Failed to make choice');
    }
  }
);
export const resetStory = createAsyncThunk(
  'story/resetStory',
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.story.resetStory();
      if (response.success === false) {
        return rejectWithValue('Failed to reset story');
      }
      if (response.data) {
        return response.data;
      }
      // Handle new API response format where segment is at the top level
      if (response.segment) {
        return {
          segmentId: response.segment.id,
          title: response.segment.id.charAt(0).toUpperCase() + response.segment.id.slice(1),
          content: response.segment.content,
          choices: response.segment.choices ? response.segment.choices.map(choice => ({
            choiceId: choice.id,
            text: choice.text
          })) : []
        };
      }
      return response;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('Failed to reset story');
    }
  }
);
// Create the slice
const storySlice = createSlice({
  name: 'story',
  initialState,
  reducers: {
    setTransitioning: (state, action: PayloadAction<boolean>) => {
      state.isTransitioning = action.payload;
    },
  },
  extraReducers: (builder) => {
    // Handle fetchCurrentSegment
    builder
      .addCase(fetchCurrentSegment.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(fetchCurrentSegment.fulfilled, (state, action) => {
        state.isLoading = false;
        state.currentSegment = action.payload;
      })
      .addCase(fetchCurrentSegment.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
    // Handle makeChoice
    builder
      .addCase(makeChoice.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(makeChoice.fulfilled, (state, action) => {
        state.isLoading = false;
        state.currentSegment = action.payload;
        state.isTransitioning = false;
      })
      .addCase(makeChoice.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
        state.isTransitioning = false;
      });
    // Handle resetStory
    builder
      .addCase(resetStory.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(resetStory.fulfilled, (state, action) => {
        state.isLoading = false;
        state.currentSegment = action.payload;
      })
      .addCase(resetStory.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
  },
});
export const { setTransitioning } = storySlice.actions;
export default storySlice.reducer;
</file>

<file path="store/slices/voiceSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { VoiceState } from '@/services/voice';
export interface VoiceInteraction {
  id: string;
  timestamp: number;
  text?: string;
  isUser: boolean;
}
interface VoiceSliceState extends VoiceState {
  recentInteractions: VoiceInteraction[];
}
const initialState: VoiceSliceState = {
  isConnected: false,
  isListening: false,
  isSpeaking: false,
  error: null,
  recentInteractions: [],
};
export const voiceSlice = createSlice({
  name: 'voice',
  initialState,
  reducers: {
    setVoiceState: (state, action: PayloadAction<VoiceState>) => {
      const { isConnected, isListening, isSpeaking, error } = action.payload;
      state.isConnected = isConnected;
      state.isListening = isListening;
      state.isSpeaking = isSpeaking;
      state.error = error;
    },
    addVoiceInteraction: (state, action: PayloadAction<VoiceInteraction>) => {
      state.recentInteractions.push(action.payload);
      // Keep only the last 10 interactions
      if (state.recentInteractions.length > 10) {
        state.recentInteractions.shift();
      }
    },
    clearVoiceInteractions: (state) => {
      state.recentInteractions = [];
    },
  },
});
export const {
  setVoiceState,
  addVoiceInteraction,
  clearVoiceInteractions,
} = voiceSlice.actions;
export default voiceSlice.reducer;
</file>

<file path="store/index.ts">
import { configureStore } from '@reduxjs/toolkit';
import { combineReducers } from 'redux';
import { 
  persistStore,
  persistReducer,
  FLUSH,
  REHYDRATE,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER 
} from 'redux-persist';
import AsyncStorage from '@react-native-async-storage/async-storage';
// Dummy reducer to fix "Store does not have a valid reducer" error
const dummyReducer = (state = {}, action: any) => {
  return state;
};
// Configure redux-persist
const persistConfig = {
  key: 'root',
  storage: AsyncStorage,
  whitelist: ['story', 'rtvi', 'voice'] // Persist story, rtvi, and voice state between app sessions
};
// Import reducers
import storyReducer from './slices/storySlice';
import rtviReducer from './slices/rtviSlice';
import voiceReducer from './slices/voiceSlice';
// Combine reducers
const rootReducer = combineReducers({
  // Add your reducers here
  dummy: dummyReducer,
  story: storyReducer,
  rtvi: rtviReducer,
  voice: voiceReducer
});
// Create persisted reducer
const persistedReducer = persistReducer(persistConfig, rootReducer);
// Configure store
export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
      },
    }),
});
// Create persistor
export const persistor = persistStore(store);
// Export types
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
</file>

<file path="theme/index.ts">
export { ThemeProvider, useTheme } from './ThemeProvider';
</file>

<file path="theme/ThemeProvider.tsx">
import React, { createContext, useContext, ReactNode } from 'react';
import { Colors } from '@/constants/Colors';
// Create context with colors only
type ThemeContextType = {
  colors: typeof Colors;
};
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);
// Theme provider props
type ThemeProviderProps = {
  children: ReactNode;
};
export const ThemeProvider = ({ children }: ThemeProviderProps) => {
  return (
    <ThemeContext.Provider
      value={{
        colors: Colors,
      }}
    >
      {children}
    </ThemeContext.Provider>
  );
};
// Custom hook to use the theme
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};
</file>

<file path=".gitignore">
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example
</file>

<file path="api-guide.md">
# Primer Server API Guide

This is a quick reference guide for client applications to interact with the Primer Server API.

## Base URL

All story-related API endpoints are prefixed with `/v1/story`.

## Authentication

Include the device ID in the `X-Device-ID` header with all requests:

```
X-Device-ID: your-unique-device-id
```

## API Endpoints

### Health Check
- `GET /health` - Check if the API is functioning correctly

### Story Endpoints
- `GET /v1/story/current` - Get the current story segment
- `POST /v1/story/choice` - Make a choice and progress the story
- `POST /v1/story/progress` - Update story progress and preferences
- `POST /v1/story/reset` - Reset the story to the beginning

### Conversational Story Endpoints
- `POST /v1/story/conversation/start` - Start a new conversational story
- `POST /v1/story/converse` - Continue a conversational story with user input

### Illustration Endpoints
- `GET /v1/story/illustrations/current` - Get illustrations for current segment
- `GET /v1/story/illustrations/segment/:segmentId` - Get illustrations for a specific segment
- `GET /v1/story/illustrations/search` - Search for illustrations by criteria
- `GET /v1/story/illustrations/:id` - Get a specific illustration by ID

### Monitoring Endpoints
- `GET /v1/monitoring/dashboard` - Get monitoring dashboard data
- `GET /v1/monitoring/gpt` - Get recent GPT usage metrics
- `GET /v1/monitoring/story` - Get recent story generation metrics
- `GET /v1/monitoring/user/:userId` - Get metrics for a specific user

## Common Request/Response Patterns

### Authentication
All requests should include the device ID:
```
X-Device-ID: your-unique-device-id
```

### Success Response Format
```json
{
  "success": true,
  "data": { ... }
}
```

### Error Response Format
```json
{
  "success": false,
  "error": "Error type",
  "message": "Detailed error message"
}
```

## Example Usage

### Starting a Story
1. Get the current story segment:
   ```
   GET /v1/story/current
   X-Device-ID: your-device-id
   ```

2. Make a choice:
   ```
   POST /v1/story/choice
   X-Device-ID: your-device-id
   Content-Type: application/json
   
   {
     "choiceId": "choice1"
   }
   ```

### Starting a Conversational Story
1. Start a conversation:
   ```
   POST /v1/story/conversation/start
   X-Device-ID: your-device-id
   Content-Type: application/json
   
   {
     "prompt": "A story about a space explorer",
     "preferences": {
       "genre": "sci-fi",
       "tone": "exciting"
     }
   }
   ```

2. Continue the conversation:
   ```
   POST /v1/story/converse
   X-Device-ID: your-device-id
   Content-Type: application/json
   
   {
     "message": "I want to explore the nearest planet",
     "conversationId": "conv-123456"
   }
   ```

### Getting Illustrations
```
GET /v1/story/illustrations/current
X-Device-ID: your-device-id
```

## Error Handling
Common HTTP status codes:
- `400` - Bad Request (missing or invalid parameters)
- `401` - Unauthorized (missing or invalid device ID)
- `404` - Not Found (resource not found)
- `500` - Internal Server Error

Always check the `success` field in the response to determine if the request was successful.
</file>

<file path="app.config.js">
const isProd = process.env.APP_ENV === 'production';
// For Android with the --localhost flag, we use a consistent approach
// The Expo Dev server will automatically replace 'localhost' with your
// machine's IP address (like 192.168.x.x) when sending to the device
const DEV_API_URL = 'http://localhost:3000';
const PROD_API_URL = 'https://primer.calemcnulty.com';
// Voice API URLs
const VOICE_DEV_API_URL = 'wss://localhost:3001/api/v1/voice';
const VOICE_PROD_API_URL = 'wss://primer.calemcnulty.com/api/v1/voice';
module.exports = {
  expo: {
    name: "The Primer",
    slug: "primer-app",
    version: "1.0.0",
    orientation: "portrait",
    icon: "./assets/images/icon.png",
    scheme: "myapp",
    userInterfaceStyle: "automatic",
    backgroundColor: "#f8f3e8",
    newArchEnabled: true,
    splash: {
      image: "./assets/images/splash-icon.png",
      resizeMode: "contain",
      backgroundColor: "#f8f3e8"
    },
    assetBundlePatterns: [
      "**/*"
    ],
    ios: {
      bundleIdentifier: "com.calemcnulty.primerapp",
      supportsTablet: true,
      infoPlist: {
        NSMicrophoneUsageDescription: "This app uses the microphone for voice interaction with your Primer.",
        NSCameraUsageDescription: "This app uses the camera for WebRTC communication."
      }
    },
    android: {
      adaptiveIcon: {
        foregroundImage: "./assets/images/adaptive-icon.png",
        backgroundColor: "#f8f3e8"
      },
      permissions: [
        "RECORD_AUDIO", 
        "INTERNET",
        "CAMERA",
        "MODIFY_AUDIO_SETTINGS"
      ],
      config: {
        cleartextTraffic: true
      },
      package: "com.calemcnulty.primerapp"
    },
    web: {
      bundler: "metro",
      output: "static",
      favicon: "./assets/images/favicon.png"
    },
    plugins: [
      "expo-router",
      [
        "expo-av",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone for voice interaction."
        }
      ],
      // "@config-plugins/react-native-webrtc"
    ],
    experiments: {
      typedRoutes: true
    },
    extra: {
      apiUrl: isProd ? PROD_API_URL : DEV_API_URL,
      androidApiUrl: isProd ? PROD_API_URL : DEV_API_URL,
      environment: isProd ? "production" : "development",
      // Add a comment to remind about --localhost behavior
      apiNote: "When using --localhost flag, 'localhost' is automatically replaced with the host machine's IP",
      // Voice API configuration
      voiceApiUrl: isProd ? VOICE_PROD_API_URL : VOICE_DEV_API_URL
    },
    updates: {
      enabled: false,
      checkAutomatically: "ON_ERROR_RECOVERY",
      fallbackToCacheTimeout: 0,
      url: ""
    }
  }
};
</file>

<file path="app.json.backup">
{
  "expo": {
    "name": "The Primer",
    "slug": "primer-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "backgroundColor": "#f8f3e8",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/images/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#f8f3e8"
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "infoPlist": {
        "NSMicrophoneUsageDescription": "This app uses the microphone for voice interaction with your Primer."
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#f8f3e8"
      },
      "permissions": ["RECORD_AUDIO", "INTERNET"],
      "config": {
        "cleartextTraffic": true
      },
      "package": "com.calemcnulty.primerapp"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-av",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone for voice interaction."
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    },
    "extra": {
      "apiUrl": "https://primer.calemcnulty.com",
      "androidApiUrl": "https://primer.calemcnulty.com",
      "environment": "production",
      "apiNote": "When using --localhost flag, 'localhost' is automatically replaced with the host machine's IP",
      "pipecatApiUrl": "https://api.pipecat.ai",
      "pipecatApiKey": ""
    },
    "updates": {
      "enabled": false,
      "checkAutomatically": "ON_ERROR_RECOVERY",
      "fallbackToCacheTimeout": 0,
      "url": ""
    }
  }
}
</file>

<file path="CLAUDE.md">
# CLAUDE.md - Primer App Reference

## Build/Test Commands
- Start app: `npm run start` or `npx expo start`
- Dev mode: `npm run start:dev` (APP_ENV=development)
- Production: `npm run start:prod` (APP_ENV=production)
- Run tests: `npm test`
- Run single test: `npm test -- -t "test name pattern"`
- Platform specific: `npm run ios` or `npm run android`
- Linting: `npm run lint`
- Reset project: `npm run reset-project`

## Code Style Guidelines
- **TypeScript**: Use strict typing with explicit interfaces/types
- **Components**: Functional components with PascalCase naming
- **Imports**: React/RN first, third-party next, local imports last (using @/ alias)
- **State Management**: Redux with typed hooks (useAppDispatch, useAppSelector)
- **Styling**: Theme-aware components with StyleSheet.create()
- **Error Handling**: try/catch blocks with descriptive error messages
- **Testing**: Jest with snapshot testing
- **Expo**: Use `npx expo install` for package management
- **File Structure**: Platform-specific files use .ios.tsx/.android.tsx extensions

## Cursor Rules
- New packages must be installed with `npx expo install` instead of npm/yarn
</file>

<file path="LOCALHOST_GUIDE.md">
# Guide to Using the `--localhost` Flag with Expo

This guide explains how to work with Expo's `--localhost` flag when connecting your Android device to your development environment.

## What is the `--localhost` Flag?

When you use `--localhost` with `expo start`, Expo does something special:

1. It automatically replaces all 'localhost' URLs in your app with your computer's actual IP address
2. It serves the development build over your local network instead of just on the loopback interface
3. It allows physical devices on the same network to connect to your development server

## Requirements

For this to work properly:

1. Your Android device must be on the same network as your development computer
2. Your computer's firewall must allow incoming connections on the Expo port (19000), API port (3000), and PipeCat port (8000)
3. Your API server must be bound to `0.0.0.0` (all interfaces), not just `127.0.0.1` or `localhost`
4. If using the PipeCat chat, the PipeCat API server should also be bound to `0.0.0.0`

## API Server Configuration

The most common issue when using `--localhost` is that the API server is only bound to `localhost` or `127.0.0.1`, which means it's not accessible from other devices on the network.

To fix this:

1. Start your API server with the `--host 0.0.0.0` flag (or equivalent for your server)
2. We've created a script to help with this: `npm run api:start`

### PipeCat API Server

For the PipeCat chat feature to work properly:

1. Start the PipeCat API server bound to all interfaces (e.g., `--host 0.0.0.0`)
2. The app looks for the PipeCat API server at `http://localhost:8000`
3. Make sure your PipeCat API key is set in the app.config.js file or as an environment variable `PIPECAT_API_KEY`

## Available Commands

We've set up several helpful npm scripts to work with the `--localhost` flag:

```
npm run android          # Start the Android app with the --localhost flag
npm run android:clean    # Clear cache and start the Android app with --localhost
npm run api:start        # Start the API server bound to all interfaces (0.0.0.0)
npm run dev              # Start both the API server and the Android app in one command
```

## Troubleshooting

### 1. Network Request Failed

If you see "Network request failed" errors:

- Make sure your API server is running and bound to `0.0.0.0`
- Check that your computer's firewall allows incoming connections on port 3000
- Verify that both your device and computer are on the same network
- Try running `npm run dev` which starts both the API server and the app

For PipeCat-specific network errors:
- Ensure the PipeCat API server is running and bound to `0.0.0.0:8000`
- Verify your PipeCat API key is correctly set in the app.config.js file or as an environment variable
- Check the console logs for detailed error messages from the PipeCat client

### 2. Cannot Connect to Metro Server

If your device can't connect to the Metro bundler:

- Make sure your computer's firewall allows incoming connections on port 19000
- Verify that both your device and computer are on the same network
- Try scanning the QR code with Expo Go again

### 3. Finding Your Computer's IP Address

To manually check your computer's IP address:

**On macOS:**
```
ipconfig getifaddr en0  # For WiFi
```

**On Windows:**
```
ipconfig
```
Look for the "IPv4 Address" under your active network adapter.

**On Linux:**
```
ip addr show
```
Look for the inet value on your primary network interface.

## How Our Code Handles `--localhost`

In our app:

1. We set all API URLs to use `http://localhost:3000`
2. When running with `--localhost`, Expo automatically replaces this with your machine's actual IP
3. Our API service has special handling for Android to ensure it works with the `--localhost` flag

## Starting Everything Together

For the best experience, use:

```
npm run dev
```

This will:
1. Start your API server bound to all interfaces (`0.0.0.0:3000`)
2. Clear the Expo cache and start the Android app with the `--localhost` flag
3. Automatically terminate both processes when you press Ctrl+C
</file>

<file path="package.json">
{
  "name": "primer-app",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "start:dev": "APP_ENV=development expo start --localhost",
    "start:prod": "APP_ENV=production expo start --localhost",
    "build:dev": "APP_ENV=development expo build",
    "build:prod": "APP_ENV=production expo build",
    "reset-project": "node ./scripts/reset-project.js",
    "clear-cache": "node ./scripts/clear-cache.js",
    "start:clean": "npm run clear-cache && APP_ENV=development expo start --clear",
    "android": "APP_ENV=development expo start --android --localhost",
    "android:clean": "npm run clear-cache && APP_ENV=development expo start --android --localhost --clear",
    "api:start": "node ./scripts/start-api-server.js",
    "dev": "concurrently \"npm run api:start\" \"npm run android:clean\" --kill-others",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "test": "jest",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@config-plugins/react-native-webrtc": "^10.0.0",
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "@reduxjs/toolkit": "^2.6.1",
    "expo": "~52.0.38",
    "expo-application": "~6.0.2",
    "expo-av": "~15.0.2",
    "expo-blur": "~14.0.3",
    "expo-constants": "~17.0.8",
    "expo-font": "~13.0.4",
    "expo-haptics": "~14.0.1",
    "expo-linking": "~7.0.5",
    "expo-router": "~4.0.19",
    "expo-splash-screen": "~0.29.22",
    "expo-status-bar": "~2.0.1",
    "expo-symbols": "~0.2.2",
    "expo-system-ui": "~4.0.8",
    "expo-web-browser": "~14.0.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.7",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13",
    "react-native-webrtc": "^124.0.5",
    "react-native-webview": "13.12.5",
    "react-redux": "^9.2.0",
    "redux-persist": "^6.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "concurrently": "^8.2.2",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.6",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "expo": {
    "doctor": {
      "reactNativeDirectoryCheck": {
        "exclude": [
          "redux-persist"
        ]
      }
    }
  },
  "private": true
}
</file>

<file path="plan.md">
# Voice Communication Implementation Plan

## Overview
This plan outlines the implementation of a seamless, app-wide voice communication system that allows users to interact with the Primer app through voice. The system will stream audio to and from the API at https://primer.calemcnulty.com/api/voice, with minimal lag using WebRTC.

## Technical Requirements
1. Real-time voice streaming with WebRTC
2. Minimal UI with just animated ellipses indicator
3. Redux integration for state management
4. App-wide voice capability (not limited to specific screens)
5. Low-latency audio processing

## Architecture

### 1. Core Components

#### 1.1 VoiceService
A singleton service that handles:
- WebRTC connection setup and management
- Audio recording and streaming
- Processing incoming audio
- Connection state management

#### 1.2 VoiceContext (React Context)
Provides app-wide access to:
- Voice service instance
- Voice state (listening, speaking, idle)
- Methods to start/stop voice interactions

#### 1.3 VoiceIndicator Component
A minimal UI component showing:
- Animated ellipses during active communication
- Optional status indicators
- Positioned in the corner of all screens

#### 1.4 Redux Integration
- New voiceSlice for state management
- Thunks for async operations
- Selectors for accessing voice states

### 2. Data Flow

```
User Speech → Device Microphone → WebRTC → API → TTS Processing → Audio Response → Device Speaker
```

### 3. WebRTC Implementation

#### 3.1 Connection Setup
```typescript
// Establish WebRTC connection with the voice API
const configuration: RTCConfiguration = {
  iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
};
const peerConnection = new RTCPeerConnection(configuration);
```

#### 3.2 Media Handling
```typescript
// Access microphone and create stream
const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });
mediaStream.getTracks().forEach(track => peerConnection.addTrack(track, mediaStream));
```

## Implementation Plan

### Phase 1: Foundation (Week 1)

#### 1.1 Setup Dependencies
- Install required packages:
  - `react-native-webrtc`
  - Additional Expo configuration for native modules

#### 1.2 Voice Service Implementation
- Create `VoiceService` class
- Implement WebRTC connection handling
- Setup audio capture functionality
- Create basic audio stream processing

#### 1.3 Redux Integration
- Create `voiceSlice.ts`
- Define state interface and initial state
- Implement reducers and action creators
- Create async thunks for voice operations

### Phase 2: Core Functionality (Week 2)

#### 2.1 API Integration
- Implement connection to `https://primer.calemcnulty.com/api/voice`
- Setup WebRTC signaling protocol
- Add authentication and session handling
- Implement error handling and reconnection logic

#### 2.2 Audio Processing
- Configure audio for optimal quality and low latency
- Implement noise cancellation
- Add voice activity detection
- Setup audio output handling

#### 2.3 VoiceContext Creation
- Implement React Context for app-wide access
- Create provider component
- Connect to Redux store
- Add utility hooks for components

### Phase 3: UI and Integration (Week 3)

#### 3.1 VoiceIndicator Component
- Create minimal UI component
- Implement animated ellipses
- Position in app corner
- Add state-based styling

#### 3.2 App-wide Integration
- Modify app root layout for voice capability
- Update permission handling
- Ensure background audio processing
- Test across different screens and navigation states

#### 3.3 Performance Optimization
- Optimize WebRTC connection parameters
- Reduce audio latency
- Minimize battery impact
- Handle interruptions (calls, etc.)

## Technical Details

### Voice Service Class Structure

```typescript
class VoiceService {
  private peerConnection: RTCPeerConnection | null = null;
  private localStream: MediaStream | null = null;
  private remoteStream: MediaStream | null = null;
  private isConnected: boolean = false;
  private isListening: boolean = false;
  
  // Event callbacks
  private onStateChangeCallbacks: ((state: VoiceState) => void)[] = [];
  
  constructor() {
    // Initialize WebRTC
  }
  
  async initialize(): Promise<void> {
    // Setup WebRTC and request permissions
  }
  
  async startListening(): Promise<void> {
    // Start recording and streaming audio
  }
  
  async stopListening(): Promise<void> {
    // Stop recording
  }
  
  private setupPeerConnection(): void {
    // Configure WebRTC peer connection
  }
  
  private handleIncomingAudio(stream: MediaStream): void {
    // Process and play incoming audio
  }
  
  subscribe(callback: (state: VoiceState) => void): () => void {
    // Add callback for state changes and return unsubscribe function
  }
}
```

### Redux Voice Slice

```typescript
interface VoiceState {
  isConnected: boolean;
  isListening: boolean;
  isSpeaking: boolean;
  error: string | null;
  recentInteractions: VoiceInteraction[];
}

const voiceSlice = createSlice({
  name: 'voice',
  initialState,
  reducers: {
    // Synchronous actions
    setConnected: (state, action: PayloadAction<boolean>) => {
      state.isConnected = action.payload;
    },
    // Other reducers
  },
  extraReducers: (builder) => {
    // Async action handling
  }
});
```

### Voice API Communication Protocol

The WebRTC signaling will use a secure WebSocket connection to:
1. Exchange ICE candidates
2. Negotiate media parameters
3. Handle session establishment
4. Manage audio channel configuration

## Testing Strategy

1. **Unit Tests**
   - Test individual components of the voice service
   - Verify Redux actions and reducers
   - Mock WebRTC connections

2. **Integration Tests**
   - Test voice service with mock API
   - Verify Redux integration
   - Test context provider functionality

3. **End-to-End Tests**
   - Test with actual API endpoint
   - Measure latency and quality
   - Verify cross-screen functionality

## Fallback and Error Handling

1. Implement graceful degradation when WebRTC is unavailable
2. Add reconnection logic for dropped connections
3. Provide user feedback for connection issues
4. Cache voice commands for offline replay when connection is restored

## Security Considerations

1. Encrypt all WebRTC traffic
2. Implement proper authentication
3. Handle sensitive audio data appropriately
4. Comply with privacy regulations for voice data

## Next Steps

1. Begin implementation of VoiceService
2. Create Redux slice for voice state
3. Design and implement minimal UI component
4. Integrate with existing app navigation
</file>

<file path="README.md">
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Project Structure

This project follows a standard directory structure:

```
project_root/
 |-- .cursor/              # Cursor AI assistant configuration
 |     |-- rules/          # Composable rules for Cursor
 |     |-- project_plan.md # Task tracking
 |     |-- changelog.md    # Project changes log
 |
 |-- app/                  # Main application code
 |-- components/           # Reusable components
 |-- constants/            # Application constants
 |-- hooks/                # Custom React hooks
 |-- services/             # API services including PipeCat client
 |-- store/                # Redux store configuration
 |-- assets/               # Static assets
 |-- README.md             # This file
```

## PipeCat Integration

This app includes integration with the PipeCat API for AI chat functionality:

### Configuration

1. Set your PipeCat API key in app.config.js:

```javascript
// In app.config.js, edit the extra section
extra: {
  // ...other config
  pipecatApiKey: process.env.PIPECAT_API_KEY || "your-api-key-here"
}
```

2. Alternatively, set the API key as an environment variable when starting the app:

```bash
PIPECAT_API_KEY=your-api-key-here npx expo start
```

### Usage

The PipeCat chat feature is available in the "RTVI" tab of the application. It provides:

- Real-time chat with an AI assistant
- Persistent conversation history
- New conversation functionality

For local development, the app expects the PipeCat API server to be running at `http://localhost:8000`. See LOCALHOST_GUIDE.md for more details on running with local servers.

## Cursor Rules

This project uses a composable rule system for the Cursor AI assistant following Geoffrey Huntley's approach from [https://ghuntley.com/stdlib/](https://ghuntley.com/stdlib/). Rules are stored in `.cursor/rules/` and can be included in custom instructions using `@file:.cursor/rules/main.mdc`.

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
</file>

<file path="tsconfig.json">
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}
</file>

<file path="voice-integration.md">
# Voice Integration API Guide

This document describes how to implement the server-side WebRTC API for voice communication with the Primer app.

## Overview

The voice API endpoint handles WebRTC connections from the mobile app, processes audio streams in real-time, and returns spoken responses. The connection is maintained through a WebSocket at `/api/v1/voice` for continuous bidirectional communication.

## Technical Requirements

- ExpressJS server with WebSocket support
- WebRTC signaling server implementation
- Real-time audio processing capability

## API Endpoint

```
wss://primer.calemcnulty.com/api/v1/voice
```

## Protocol

The communication between client and server is based on WebRTC signaling protocol over WebSockets. Messages are exchanged as JSON objects.

### Message StructureW

All messages should follow this format:
```json
{
  "type": "message-type",
  "data": {} // Optional data specific to the message type
}
```

## Connection Lifecycle

### 1. Connection Establishment

1. Client connects to the WebSocket endpoint
2. Server accepts connection and waits for client signaling

### 2. Signaling Exchange

#### WebRTC Offer (Client -> Server)
```json
{
  "type": "offer",
  "sdp": {
  }
}
```

#### WebRTC Answer (Server -> Client)
```json
{
  "type": "answer",
  "sdp": {
    // SDP data from RTCPeerConnection.createAnswer()
  }
}
```

#### ICE Candidate Exchange (Both directions)
```json
{
  "type": "ice-candidate",
  "candidate": {
    // ICE candidate data
  }
}
```

### 3. Voice Interaction Control

#### Start Listening (Client -> Server)
```json
{
  "type": "start-listening"
}
```

#### Stop Listening (Client -> Server)
```json
{
  "type": "stop-listening"
}
```

#### Speaking State Updates (Server -> Client)
```json
{
  "type": "speaking-start"
}
```

```json
{
  "type": "speaking-end"
}
```

## Error Handling

### Error Message (Server -> Client)
```json
{
  "type": "error",
  "error": {
    "code": "ERROR_CODE",
    "message": "Human-readable error message"
  }
}
```

Common error codes:
- `CONNECTION_FAILED`: WebRTC connection could not be established
- `AUTH_FAILED`: Authentication failed
- `INTERNAL_ERROR`: Server-side error occurred
- `MEDIA_ERROR`: Media stream processing error

## Implementation Notes

### ExpressJS Setup

```javascript
const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const { RTCPeerConnection, RTCSessionDescription, RTCIceCandidate } = require('wrtc');

// Setup Express
const app = express();
const server = http.createServer(app);

// Create WebSocket server
const wss = new WebSocket.Server({ server });

// WebRTC connections map
const connections = new Map();

// Handle WebSocket connections
wss.on('connection', (ws) => {
  // Create a unique ID for this connection
  const connectionId = generateUniqueId();
  
  // Setup peer connection
  const peerConnection = new RTCPeerConnection({
    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
  });
  
  // Store connection
  connections.set(connectionId, {
    ws,
    peerConnection,
    // Add any other state needed for this connection
  });
  
  // Handle incoming messages
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      handleMessage(connectionId, data);
    } catch (error) {
      console.error('Error parsing message:', error);
    }
  });
  
  // Handle WebSocket closure
  ws.on('close', () => {
    cleanupConnection(connectionId);
  });
});

// Start the server
server.listen(3001, () => {
  console.log('Voice API server running on port 3001 at path /api/v1/voice');
});
```

### Message Handler Example

```javascript
async function handleMessage(connectionId, message) {
  const connection = connections.get(connectionId);
  if (!connection) return;
  
  const { ws, peerConnection } = connection;
  
  switch (message.type) {
    case 'offer':
      // Handle WebRTC offer
      await peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp));
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      
      // Send answer back to client
      ws.send(JSON.stringify({
        type: 'answer',
        sdp: peerConnection.localDescription
      }));
      break;
      
    case 'ice-candidate':
      // Add ICE candidate
      await peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
      break;
      
    case 'start-listening':
      // Start processing audio from the connected peer
      // Implementation depends on your audio processing requirements
      beginAudioProcessing(connectionId);
      break;
      
    case 'stop-listening':
      // Stop processing audio
      stopAudioProcessing(connectionId);
      break;
      
    default:
      console.warn('Unknown message type:', message.type);
  }
}
```

## Security Considerations

1. **Authentication**: Implement token-based authentication for WebSocket connections
2. **Data Encryption**: Ensure all WebRTC traffic is encrypted
3. **Rate Limiting**: Implement rate limiting to prevent abuse
4. **Connection Timeouts**: Close inactive connections after a period of inactivity

## Testing the API

You can test the WebSocket API using tools like wscat:

```bash
wscat -c wss://primer.calemcnulty.com/api/v1/voice
```

Or test the entire WebRTC flow using a browser-based client that connects to your API endpoint.

## Example Flow

1. Client establishes WebSocket connection to `/api/v1/voice`
2. Client creates WebRTC peer connection and sends offer
3. Server responds with WebRTC answer
4. Both exchange ICE candidates until connection is established
5. Client sends `start-listening` message
6. Server processes incoming audio and sends audio response
7. Server sends `speaking-start` when beginning to send audio response
8. Server sends `speaking-end` when finished sending audio response
9. Client sends `stop-listening` to end the interaction
10. WebSocket connection remains open for future interactions

## Error Recovery

If the WebRTC connection fails:
1. Client should attempt to reconnect with a new WebSocket connection
2. Connection attempt should back off exponentially if repeated failures occur
3. Client should notify the user of connection issues if persistent

## Performance Considerations

1. Optimize WebRTC settings for voice-only communication (disable video tracks)
2. Configure appropriate audio quality settings (sample rate, bit depth)
3. Consider implementing server-side echo cancellation and noise reduction
4. Monitor server resource usage during active connections
</file>

</files>
